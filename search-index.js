var searchIndex={};
searchIndex["arrayfire"] = {"doc":"ArrayFire is a high performance software library for…","i":[[3,"Array","arrayfire","A multidimensional data container",null,null],[3,"Dim4","","Dim4 is used to store Array dimensions",null,null],[3,"Callback","","Structure holding handle to callback function",null,null],[3,"Event","","RAII construct to manage ArrayFire events",null,null],[3,"Indexer","","Struct to manage an array of resources of type…",null,null],[3,"Seq","","Sequences are used for indexing Arrays",null,null],[3,"Window","","Used to render Array objects",null,null],[3,"RandomEngine","","Random number generator engine",null,null],[3,"Features","","A set of Array objects (usually, used in Computer vision…",null,null],[4,"AfError","","Error codes",null,null],[13,"SUCCESS","","The function returned successfully",0,null],[13,"ERR_NO_MEM","","The system or device ran out of memory",0,null],[13,"ERR_DRIVER","","There was an error in the device driver",0,null],[13,"ERR_RUNTIME","","There was an error with the runtime environment",0,null],[13,"ERR_INVALID_ARRAY","","The input array is not a valid Array object",0,null],[13,"ERR_ARG","","One of the function arguments is incorrect",0,null],[13,"ERR_SIZE","","The size is incorrect",0,null],[13,"ERR_TYPE","","The type is not suppported by this function",0,null],[13,"ERR_DIFF_TYPE","","The type of the input arrays are not compatible",0,null],[13,"ERR_BATCH","","Function does not support GFOR / batch mode",0,null],[13,"ERR_DEVICE","","Input does not belong to the current device",0,null],[13,"ERR_NOT_SUPPORTED","","The option is not supported",0,null],[13,"ERR_NOT_CONFIGURED","","This build of ArrayFire does not support this feature",0,null],[13,"ERR_NO_DBL","","This device does not support double",0,null],[13,"ERR_NO_GFX","","This build of ArrayFire was not built with graphics or…",0,null],[13,"ERR_INTERNAL","","There was an internal error either in ArrayFire or in a…",0,null],[13,"ERR_UNKNOWN","","Unknown Error",0,null],[4,"Backend","","Compute/Acceleration Backend",null,null],[13,"DEFAULT","","Default backend order: OpenCL -> CUDA -> CPU",1,null],[13,"CPU","","CPU a.k.a sequential algorithms",1,null],[13,"CUDA","","CUDA Compute Backend",1,null],[13,"OPENCL","","OpenCL Compute Backend",1,null],[4,"DType","","Types of Array data type",null,null],[13,"F32","","32 bit float",2,null],[13,"C32","","32 bit complex float",2,null],[13,"F64","","64 bit float",2,null],[13,"C64","","64 bit complex float",2,null],[13,"B8","","8 bit boolean",2,null],[13,"S32","","32 bit signed integer",2,null],[13,"U32","","32 bit unsigned integer",2,null],[13,"U8","","8 bit unsigned integer",2,null],[13,"S64","","64 bit signed integer",2,null],[13,"U64","","64 bit unsigned integer",2,null],[13,"S16","","16 bit signed integer",2,null],[13,"U16","","16 bit unsigned integer",2,null],[13,"F16","","16 bit floating point",2,null],[4,"InterpType","","Dictates the interpolation method to be used by a function",null,null],[13,"NEAREST","","Nearest Neighbor interpolation method",3,null],[13,"LINEAR","","Linear interpolation method",3,null],[13,"BILINEAR","","Bilinear interpolation method",3,null],[13,"CUBIC","","Cubic interpolation method",3,null],[13,"LOWER","","Floor indexed",3,null],[13,"LINEAR_COSINE","","Linear interpolation with cosine smoothing",3,null],[13,"BILINEAR_COSINE","","Bilinear interpolation with cosine smoothing",3,null],[13,"BICUBIC","","Bicubic interpolation",3,null],[13,"CUBIC_SPLINE","","Cubic interpolation with Catmull-Rom splines",3,null],[13,"BICUBIC_SPLINE","","Bicubic interpolation with Catmull-Rom splines",3,null],[4,"BorderType","","Helps determine how to pad kernels along borders",null,null],[13,"ZERO","","Pad using zeros",4,null],[13,"SYMMETRIC","","Pad using mirrored values along border",4,null],[13,"CLAMP_TO_EDGE","","Out of bound values are clamped to the edge",4,null],[13,"PERIODIC","","Out of bound values are mapped to range of the dimension…",4,null],[4,"Connectivity","","Used by `regions` function to identify type of connectivity",null,null],[13,"FOUR","","North-East-South-West (N-E-S-W) connectivity from given…",5,null],[13,"EIGHT","","N-NE-E-SE-S-SW-W-NW connectivity from given pixel/point",5,null],[4,"ConvMode","","Helps determine the size of output of convolution",null,null],[13,"DEFAULT","","Default convolution mode where output size is same as…",6,null],[13,"EXPAND","","Output of convolution is expanded based on signal and…",6,null],[4,"ConvDomain","","Helps determine if convolution is in Spatial or Frequency…",null,null],[13,"AUTO","","ArrayFire chooses whether the convolution will be in…",7,null],[13,"SPATIAL","","Convoltion in spatial domain",7,null],[13,"FREQUENCY","","Convolution in frequency domain",7,null],[4,"MatchType","","Error metric used by `matchTemplate` function",null,null],[13,"SAD","","Sum of Absolute Differences",8,null],[13,"ZSAD","","Zero-mean Sum of Absolute Differences",8,null],[13,"LSAD","","Locally scaled Sum of Absolute Differences",8,null],[13,"SSD","","Sum of Squared Differences",8,null],[13,"ZSSD","","Zero-mean Sum of Squared Differences",8,null],[13,"LSSD","","Localy scaled Sum of Squared Differences",8,null],[13,"NCC","","Normalized Cross Correlation",8,null],[13,"ZNCC","","Zero-mean Normalized Cross Correlation",8,null],[13,"SHD","","Sum of Hamming Distances",8,null],[4,"ColorSpace","","Identify the color space of given image(Array)",null,null],[13,"GRAY","","Grayscale color space",9,null],[13,"RGB","","Red-Green-Blue color space",9,null],[13,"HSV","","Hue-Saturation-value color space",9,null],[4,"MatProp","","Helps determine the type of a Matrix",null,null],[13,"NONE","","Default (no-op)",10,null],[13,"TRANS","","Data needs to be transposed",10,null],[13,"CTRANS","","Data needs to be conjugate transposed",10,null],[13,"UPPER","","Matrix is upper triangular",10,null],[13,"LOWER","","Matrix is lower triangular",10,null],[13,"DIAGUNIT","","Matrix diagonal has unitary values",10,null],[13,"SYM","","Matrix is symmetric",10,null],[13,"POSDEF","","Matrix is positive definite",10,null],[13,"ORTHOG","","Matrix is orthogonal",10,null],[13,"TRIDIAG","","Matrix is tri-diagonal",10,null],[13,"BLOCKDIAG","","Matrix is block-diagonal",10,null],[4,"NormType","","Norm type",null,null],[13,"VECTOR_1","","Treats input as a vector and return sum of absolute values",11,null],[13,"VECTOR_INF","","Treats input as vector and return max of absolute values",11,null],[13,"VECTOR_2","","Treats input as vector and returns euclidean norm",11,null],[13,"VECTOR_P","","Treats input as vector and returns the p-norm",11,null],[13,"MATRIX_1","","Return the max of column sums",11,null],[13,"MATRIX_INF","","Return the max of row sums",11,null],[13,"MATRIX_2","","Returns the max singular value (Currently not supported)",11,null],[13,"MATRIX_L_PQ","","Returns Lpq-norm",11,null],[4,"ColorMap","","Dictates what color map is used for Image rendering",null,null],[13,"DEFAULT","","Default color map is grayscale range [0-1]",12,null],[13,"SPECTRUM","","Visible spectrum color map",12,null],[13,"COLORS","","Colors",12,null],[13,"RED","","Red hue map",12,null],[13,"MOOD","","Mood color map",12,null],[13,"HEAT","","Heat color map",12,null],[13,"BLUE","","Blue hue map",12,null],[4,"YCCStd","","YCbCr Standards",null,null],[13,"YCC_601","","ITU-R BT.601 (formerly CCIR 601) standard",13,null],[13,"YCC_709","","ITU-R BT.709 standard",13,null],[13,"YCC_2020","","ITU-R BT.2020 standard",13,null],[4,"HomographyType","","Homography type",null,null],[13,"RANSAC","","RANdom SAmple Consensus algorithm",14,null],[13,"LMEDS","","Least Median of Squares",14,null],[4,"MarkerType","","Plotting markers",null,null],[13,"NONE","","No marker",15,null],[13,"POINT","","Pointer marker",15,null],[13,"CIRCLE","","Hollow circle marker",15,null],[13,"SQUARE","","Hollow Square marker",15,null],[13,"TRIANGLE","","Hollow Triangle marker",15,null],[13,"CROSS","","Cross-hair marker",15,null],[13,"PLUS","","Plus symbol marker",15,null],[13,"STAR","","Start symbol marker",15,null],[4,"MomentType","","Image moment types",null,null],[13,"M00","","Central moment of order (0 + 0)",16,null],[13,"M01","","Central moment of order (0 + 1)",16,null],[13,"M10","","Central moment of order (1 + 0)",16,null],[13,"M11","","Central moment of order (1 + 1)",16,null],[13,"FIRST_ORDER","","All central moments of order (0,0), (0,1), (1,0) and (1,1)",16,null],[4,"SparseFormat","","Sparse storage format type",null,null],[13,"DENSE","","Dense format",17,null],[13,"CSR","","Compressed sparse row format",17,null],[13,"CSC","","Compressed sparse coloumn format",17,null],[13,"COO","","Coordinate list (row, coloumn, value) tuples.",17,null],[4,"BinaryOp","","Binary operation types for generalized scan functions",null,null],[13,"ADD","","Addition operation",18,null],[13,"MUL","","Multiplication operation",18,null],[13,"MIN","","Minimum operation",18,null],[13,"MAX","","Maximum operation",18,null],[4,"RandomEngineType","","Random engine types",null,null],[13,"PHILOX_4X32_10","","Philox variant with N=4, W=32 and Rounds=10",19,null],[13,"THREEFRY_2X32_16","","Threefry variant with N=2, W=32 and Rounds=16",19,null],[13,"MERSENNE_GP11213","","Mersenne variant with MEXP = 11213",19,null],[4,"Scalar","","Scalar value types",null,null],[13,"F32","","32 bit float",20,null],[13,"C32","","32 bit complex float",20,null],[13,"F64","","64 bit float",20,null],[13,"C64","","64 bit complex float",20,null],[13,"B8","","8 bit boolean",20,null],[13,"S32","","32 bit signed integer",20,null],[13,"U32","","32 bit unsigned integer",20,null],[13,"U8","","8 bit unsigned integer",20,null],[13,"S64","","64 bit signed integer",20,null],[13,"U64","","64 bit unsigned integer",20,null],[13,"S16","","16 bit signed integer",20,null],[13,"U16","","16 bit unsigned integer",20,null],[4,"CannyThresholdType","","Canny edge detector threshold operations types",null,null],[13,"MANUAL","","User has to define canny thresholds manually",21,null],[13,"OTSU","","Determine canny algorithm high threshold using Otsu…",21,null],[4,"DiffusionEq","","Anisotropic diffusion flux equation types",null,null],[13,"QUADRATIC","","Quadratic flux function",22,null],[13,"EXPONENTIAL","","Exponential flux function",22,null],[13,"DEFAULT","","Default flux function, a.k.a exponential",22,null],[4,"FluxFn","","Diffusion equation types",null,null],[13,"GRADIENT","","Quadratic flux function",23,null],[13,"MCDE","","Modified curvature diffusion equation",23,null],[13,"DEFAULT","","Default diffusion method, Gradient",23,null],[4,"TopkFn","","topk function ordering",null,null],[13,"MIN","","Top k min values",24,null],[13,"MAX","","Top k max values",24,null],[13,"DEFAULT","","Default option(max)",24,null],[4,"IterativeDeconvAlgo","","Iterative Deconvolution Algorithm",null,null],[13,"LANDWEBER","","Land-Weber Algorithm",25,null],[13,"RICHARDSONLUCY","","Richardson-Lucy Algorithm",25,null],[13,"DEFAULT","","Default is Land-Weber algorithm",25,null],[4,"InverseDeconvAlgo","","Inverse Deconvolution Algorithm",null,null],[13,"TIKHONOV","","Tikhonov algorithm",26,null],[13,"DEFAULT","","Default is Tikhonov algorithm",26,null],[4,"ConvGradientType","","Gradient mode for convolution",null,null],[13,"FILTER","","Filter Gradient",27,null],[13,"DATA","","Data Gradient",27,null],[13,"BIAS","","Biased Gradient",27,null],[13,"DEFAULT","","Default is Data Gradient",27,null],[4,"VarianceBias","","Gradient mode for convolution",null,null],[13,"SAMPLE","","Sample variance",28,null],[13,"POPULATION","","Population variance",28,null],[13,"DEFAULT","","Default (Population) variance",28,null],[4,"CublasMathMode","","Gradient mode for convolution",null,null],[13,"TENSOR_OP","","To indicate use of Tensor Cores on CUDA capable GPUs",29,null],[13,"DEFAULT","","Default i.e. tensor core operations will be avoided by the…",29,null],[5,"print","","Print data in the Array",null,[[["array"]]]],[5,"print_gen","","Generalized Array print function",null,[[["string"],["array"],["option",["i32"]],["i32"]]]],[5,"eval_multiple","","evaluate multiple arrays",null,[[["array"],["vec",["array"]]]]],[5,"set_manual_eval","","Set eval flag value",null,[[["bool"]]]],[5,"is_eval_manual","","Get eval flag value",null,[[],["bool"]]],[5,"sum","","Sum elements along a given dimension",null,[[["array"],["i32"]],["array"]]],[5,"product","","Compute product of elements along a given dimension",null,[[["array"],["i32"]],["array"]]],[5,"min","","Find minimum among elements of given dimension",null,[[["array"],["i32"]],["array"]]],[5,"max","","Find maximum among elements of given dimension",null,[[["array"],["i32"]],["array"]]],[5,"all_true","","Find if all of the values along a given dimension in the…",null,[[["array"],["i32"]],[["array",["bool"]],["bool"]]]],[5,"any_true","","Find if any of the values along a given dimension in the…",null,[[["array"],["i32"]],[["array",["bool"]],["bool"]]]],[5,"count","","Count number of non-zero elements along a given dimension",null,[[["array"],["i32"]],[["array",["u32"]],["u32"]]]],[5,"accum","","Perform exclusive sum of elements along a given dimension",null,[[["array"],["i32"]],["array"]]],[5,"diff1","","Calculate first order numerical difference along a given…",null,[[["array"],["i32"]],["array"]]],[5,"diff2","","Calculate second order numerical difference along a given…",null,[[["array"],["i32"]],["array"]]],[5,"sum_nan","","Sum along specific dimension using user specified value…",null,[[["f64"],["array"],["i32"]],["array"]]],[5,"product_nan","","Product of elements along specific dimension using user…",null,[[["f64"],["array"],["i32"]],["array"]]],[5,"sum_all","","Sum all values of the Array",null,[[["array"]]]],[5,"product_all","","Product of all values of the Array",null,[[["array"]]]],[5,"min_all","","Find minimum among all values of the Array",null,[[["array"]]]],[5,"max_all","","Find maximum among all values of the Array",null,[[["array"]]]],[5,"all_true_all","","Find if all values of Array are non-zero",null,[[["array"]]]],[5,"any_true_all","","Find if any value of Array is non-zero",null,[[["array"]]]],[5,"count_all","","Count number of non-zero values in the Array",null,[[["array"]]]],[5,"sum_nan_all","","Sum all values using user provided value for `NAN`",null,[[["f64"],["array"]]]],[5,"product_nan_all","","Product of all values using user provided value for `NAN`",null,[[["f64"],["array"]]]],[5,"imin","","Find minimum value along given dimension and their…",null,[[["array"],["i32"]]]],[5,"imax","","Find maximum value along given dimension and their…",null,[[["array"],["i32"]]]],[5,"imin_all","","Find minimum and it's index in the whole Array",null,[[["array"]]]],[5,"imax_all","","Find maximum and it's index in the whole Array",null,[[["array"]]]],[5,"locate","","Locate the indices of non-zero elements.",null,[[["array"]],[["array",["u32"]],["u32"]]]],[5,"sort","","Sort the values in input Arrays",null,[[["u32"],["array"],["bool"]],["array"]]],[5,"sort_index","","Sort the values in input Arrays",null,[[["u32"],["array"],["bool"]]]],[5,"sort_by_key","","Sort the values in input Arrays",null,[[["u32"],["array"],["array"],["bool"]]]],[5,"set_unique","","Find unique values from a Set",null,[[["array"],["bool"]],["array"]]],[5,"set_union","","Find union of two sets",null,[[["array"],["bool"]],["array"]]],[5,"set_intersect","","Find intersection of two sets",null,[[["array"],["bool"]],["array"]]],[5,"scan","","Generalized scan",null,[[["array"],["i32"],["binaryop"],["bool"]],["array"]]],[5,"scan_by_key","","Generalized scan by key",null,[[["i32"],["array"],["binaryop"],["array"],["bool"]],["array"]]],[5,"all_true_by_key","","Key based AND of elements along a given dimension",null,[[["array"],["array"],["i32"]]]],[5,"any_true_by_key","","Key based OR of elements along a given dimension",null,[[["array"],["array"],["i32"]]]],[5,"count_by_key","","Find total count of elements with similar keys along a…",null,[[["array"],["array"],["i32"]]]],[5,"max_by_key","","Find maximum among values of similar keys along a given…",null,[[["array"],["array"],["i32"]]]],[5,"min_by_key","","Find minimum among values of similar keys along a given…",null,[[["array"],["array"],["i32"]]]],[5,"product_by_key","","Find product of all values with similar keys along a given…",null,[[["array"],["array"],["i32"]]]],[5,"sum_by_key","","Find sum of all values with similar keys along a given…",null,[[["array"],["array"],["i32"]]]],[5,"sum_by_key_nan","","Compute sum of all values with similar keys along a given…",null,[[["i32"],["array"],["array"],["f64"]]]],[5,"product_by_key_nan","","Compute product of all values with similar keys along a…",null,[[["i32"],["array"],["array"],["f64"]]]],[5,"abs","","Computes absolute value",null,[[["array"]],["array"]]],[5,"arg","","Computes phase value",null,[[["array"]],["array"]]],[5,"trunc","","Truncate the values in an Array",null,[[["array"]],["array"]]],[5,"sign","","Computes the sign of input Array values",null,[[["array"]],["array"]]],[5,"round","","Round the values in an Array",null,[[["array"]],["array"]]],[5,"floor","","Floor the values in an Array",null,[[["array"]],["array"]]],[5,"ceil","","Ceil the values in an Array",null,[[["array"]],["array"]]],[5,"sigmoid","","Compute sigmoid function",null,[[["array"]],["array"]]],[5,"expm1","","Compute e raised to the power of value -1",null,[[["array"]],["array"]]],[5,"erf","","Compute error function value",null,[[["array"]],["array"]]],[5,"erfc","","Compute the complementary error function value",null,[[["array"]],["array"]]],[5,"log10","","Compute logarithm base 10",null,[[["array"]],["array"]]],[5,"log1p","","Compute the logarithm of input Array + 1",null,[[["array"]],["array"]]],[5,"log2","","Compute logarithm base 2",null,[[["array"]],["array"]]],[5,"cbrt","","Compute the cube root",null,[[["array"]],["array"]]],[5,"tgamma","","Compute gamma function",null,[[["array"]],["array"]]],[5,"lgamma","","Compute the logarithm of absolute values of gamma function",null,[[["array"]],["array"]]],[5,"acosh","","Compute acosh",null,[[["array"]],["array"]]],[5,"acos","","Compute acos",null,[[["array"]],["array"]]],[5,"asin","","Compute asin",null,[[["array"]],["array"]]],[5,"asinh","","Compute asinh",null,[[["array"]],["array"]]],[5,"atan","","Compute atan",null,[[["array"]],["array"]]],[5,"atanh","","Compute atanh",null,[[["array"]],["array"]]],[5,"cos","","Compute cos",null,[[["array"]],["array"]]],[5,"cosh","","Compute cosh",null,[[["array"]],["array"]]],[5,"exp","","Compute e raised to the power of value",null,[[["array"]],["array"]]],[5,"log","","Compute the natural logarithm",null,[[["array"]],["array"]]],[5,"sin","","Compute sin",null,[[["array"]],["array"]]],[5,"sinh","","Compute sinh",null,[[["array"]],["array"]]],[5,"sqrt","","Compute the square root",null,[[["array"]],["array"]]],[5,"rsqrt","","Compute the reciprocal square root",null,[[["array"]],["array"]]],[5,"tan","","Compute tan",null,[[["array"]],["array"]]],[5,"tanh","","Compute tanh",null,[[["array"]],["array"]]],[5,"real","","Extract real values from a complex Array",null,[[["array"]],["array"]]],[5,"imag","","Extract imaginary values from a complex Array",null,[[["array"]],["array"]]],[5,"cplx","","Create a complex Array from real Array",null,[[["array"]],["array"]]],[5,"conjg","","Compute the complex conjugate",null,[[["array"]],["array"]]],[5,"pow2","","Compute two raised to the power of value",null,[[["array"]],["array"]]],[5,"factorial","","Compute the factorial",null,[[["array"]],["array"]]],[5,"iszero","","Check if values are zero",null,[[["array"]],[["array",["bool"]],["bool"]]]],[5,"isinf","","Check if values are infinity",null,[[["array"]],[["array",["bool"]],["bool"]]]],[5,"isnan","","Check if values are NaN",null,[[["array"]],[["array",["bool"]],["bool"]]]],[5,"bitand","","Elementwise AND(bit) operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"bitor","","Elementwise OR(bit) operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"bitxor","","Elementwise XOR(bit) operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"neq","","Elementwise not equals comparison of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"and","","Elementwise logical and operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"or","","Elementwise logical or operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"minof","","Elementwise minimum operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"maxof","","Elementwise maximum operation of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"hypot","","Compute length of hypotenuse of two Arrays",null,[[["array"],["array"],["bool"]],["array"]]],[5,"add","","Addition of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"sub","","Subtraction of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"mul","","Multiplication of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"div","","Division of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"rem","","Compute remainder from two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"shiftl","","Compute left shift",null,[[["bool"],["t"],["u"]],["array"]]],[5,"shiftr","","Compute right shift",null,[[["bool"],["t"],["u"]],["array"]]],[5,"modulo","","Compute modulo of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"atan2","","Calculate atan2 of two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"cplx2","","Create complex array from two Arrays",null,[[["bool"],["t"],["u"]],["array"]]],[5,"root","","Compute root",null,[[["bool"],["t"],["u"]],["array"]]],[5,"pow","","Computer power",null,[[["bool"],["t"],["u"]],["array"]]],[5,"lt","","Perform `less than` comparison operation",null,[[["bool"],["t"],["u"]],[["array",["bool"]],["bool"]]]],[5,"gt","","Perform `greater than` comparison operation",null,[[["bool"],["t"],["u"]],[["array",["bool"]],["bool"]]]],[5,"le","","Perform `less than equals` comparison operation",null,[[["bool"],["t"],["u"]],[["array",["bool"]],["bool"]]]],[5,"ge","","Perform `greater than equals` comparison operation",null,[[["bool"],["t"],["u"]],[["array",["bool"]],["bool"]]]],[5,"eq","","Perform `equals` comparison operation",null,[[["bool"],["t"],["u"]],[["array",["bool"]],["bool"]]]],[5,"clamp","","Clamp the values of Array",null,[[["bool"],["array"],["c"]],["array"]]],[5,"set_backend","","Toggle backends between cuda, opencl or cpu",null,[[["backend"]]]],[5,"get_backend_count","","Get the available backend count",null,[[],["u32"]]],[5,"get_available_backends","","Get the available backends",null,[[],[["vec",["backend"]],["backend"]]]],[5,"get_active_backend","","Get current active backend",null,[[],["backend"]]],[5,"gemm","","BLAS general matrix multiply (GEMM) of two Array objects",null,[[["matprop"],["array"],["array"],["vec"]]]],[5,"matmul","","Matrix multiple of two Arrays",null,[[["matprop"],["array"]],["array"]]],[5,"dot","","Calculate the dot product of vectors.",null,[[["matprop"],["array"]],["array"]]],[5,"transpose","","Transpose of a matrix.",null,[[["array"],["bool"]],[["array"],["hasafenum"]]]],[5,"transpose_inplace","","Inplace transpose of a matrix.",null,[[["array"],["bool"]]]],[5,"set_cublas_mode","","Sets the cuBLAS math mode for the internal handle.",null,[[["cublasmathmode"]]]],[5,"constant","","Create an Array with constant value",null,[[["constgenerator"],["dim4"]],["array"]]],[5,"range","","Create a Range of values",null,[[["i32"],["dim4"]],[["array"],["hasafenum"]]]],[5,"iota","","Create a range of values",null,[[["dim4"]],[["array"],["hasafenum"]]]],[5,"identity","","Create an identity array with 1's in diagonal",null,[[["dim4"]],[["array"],["hasafenum"]]]],[5,"diag_create","","Create a diagonal matrix",null,[[["array"],["i32"]],["array"]]],[5,"diag_extract","","Extract diagonal from a given Matrix",null,[[["array"],["i32"]],["array"]]],[5,"join","","Join two arrays",null,[[["array"],["i32"]],["array"]]],[5,"join_many","","Join multiple arrays",null,[[["vec",["array"]],["array"],["i32"]],["array"]]],[5,"tile","","Tile the input array along specified dimension",null,[[["array"],["dim4"]],["array"]]],[5,"reorder_v2","","Reorder the array in specified order",null,[[["vec",["u64"]],["array"],["u64"],["option",["vec"]]],["array"]]],[5,"reorder","","Reorder the array in specified order",null,[[["array"],["dim4"]],["array"]]],[5,"shift","","\"Circular shift of values along specified dimension",null,[[["array"]],["array"]]],[5,"moddims","","Change the shape of the Array",null,[[["array"],["dim4"]],["array"]]],[5,"flat","","Flatten the multidimensional Array to an 1D Array",null,[[["array"]],["array"]]],[5,"flip","","Flip the Array",null,[[["u32"],["array"]],["array"]]],[5,"lower","","Create lower triangular matrix",null,[[["array"],["bool"]],["array"]]],[5,"upper","","Create upper triangular matrix",null,[[["array"],["bool"]],["array"]]],[5,"select","","Element wise conditional operator for Arrays",null,[[["array"],["array"]],["array"]]],[5,"selectl","","Element wise conditional operator for Arrays",null,[[["f64"],["array"],["array"]],["array"]]],[5,"selectr","","Element wise conditional operator for Arrays",null,[[["f64"],["array"],["array"]],["array"]]],[5,"replace","","Inplace replace in Array based on a condition",null,[[["array"],["array"],["array"]]]],[5,"replace_scalar","","Inplace replace in Array based on a condition",null,[[["array"],["f64"],["array"]]]],[5,"pad","","Pad input Array along borders",null,[[["bordertype"],["array"],["dim4"]],[["array"],["hasafenum"]]]],[5,"get_version","","Get ArrayFire Version Number",null,[[]]],[5,"get_revision","","Get ArrayFire Revision (commit) information of the library.",null,[[],[["str"],["cow",["str"]]]]],[5,"info","","Print library meta-info",null,[[]]],[5,"info_string","","Return library meta-info as `String`",null,[[["bool"]],["string"]]],[5,"device_info","","Gets the information about device and platform as strings.",null,[[]]],[5,"init","","Initialize ArrayFire library",null,[[]]],[5,"device_count","","Get total number of available devices",null,[[],["i32"]]],[5,"is_double_available","","Check if a device has double support",null,[[["i32"]],["bool"]]],[5,"set_device","","Set active device",null,[[["i32"]]]],[5,"get_device","","Get the current active device id",null,[[],["i32"]]],[5,"device_mem_info","","Get memory information from the memory manager for the…",null,[[]]],[5,"print_mem_info","","Print buffer details from the ArrayFire device manager",null,[[["string"],["i32"]]]],[5,"set_mem_step_size","","Set the minimum memory chunk size",null,[[["usize"]]]],[5,"get_mem_step_size","","Get the minimum memory chunk size",null,[[],["usize"]]],[5,"device_gc","","Call the garbage collection routine",null,[[]]],[5,"sync","","Sync all operations on given device",null,[[["i32"]]]],[5,"handle_error_general","","Default error handling callback provided by ArrayFire crate",null,[[["aferror"]]]],[5,"register_error_handler","","Register user provided error handler",null,[[["callback"]]]],[5,"index","","Indexes the `input` Array using `seqs` Sequences",null,[[["array"]],["array"]]],[5,"row","","Extract `row_num` row from `input` Array",null,[[["array"],["u64"]],["array"]]],[5,"set_row","","Set `row_num`^th row in `input` Array to a new Array…",null,[[["array"],["u64"]],["array"]]],[5,"rows","","Get an Array with all rows from `first` to `last` in the…",null,[[["array"],["u64"]],["array"]]],[5,"set_rows","","Set rows from `first` to `last` in `input` Array with rows…",null,[[["array"],["u64"]],["array"]]],[5,"col","","Extract `col_num` col from `input` Array",null,[[["array"],["u64"]],["array"]]],[5,"set_col","","Set `col_num`^th col in `input` Array to a new Array…",null,[[["array"],["u64"]],["array"]]],[5,"cols","","Get all cols from `first` to `last` in the `input` Array",null,[[["array"],["u64"]],["array"]]],[5,"set_cols","","Set cols from `first` to `last` in `input` Array with cols…",null,[[["array"],["u64"]],["array"]]],[5,"slice","","Get `slice_num`^th slice from `input` Array",null,[[["array"],["u64"]],["array"]]],[5,"set_slice","","Set slice `slice_num` in `input` Array to a new Array…",null,[[["array"],["u64"]],["array"]]],[5,"slices","","Get slices from `first` to `last` in `input` Array",null,[[["array"],["u64"]],["array"]]],[5,"set_slices","","Set `first` to `last` slices of `input` Array to a new…",null,[[["array"],["u64"]],["array"]]],[5,"lookup","","Lookup(hash) an Array using another Array",null,[[["i32"],["array"],["array"]],["array"]]],[5,"assign_seq","","Assign(copy) content of an Array to another Array indexed…",null,[[["array"]],["array"]]],[5,"index_gen","","Index an Array using any combination of Array's and…",null,[[["indexer"],["array"]],["array"]]],[5,"assign_gen","","Assign an Array to another after indexing it using any…",null,[[["array"],["indexer"]],["array"]]],[5,"gradient","","Calculate the gradients",null,[[["array"]]]],[5,"load_image","","Load Image into Array",null,[[["string"],["bool"]],["array"]]],[5,"load_image_native","","Load Image into Array in it's native type",null,[[["string"]],["array"]]],[5,"save_image","","Save an Array to an image file",null,[[["string"],["array"]]]],[5,"save_image_native","","Save an Array without modifications to an image file",null,[[["string"],["array"]]]],[5,"resize","","Resize an Image",null,[[["i64"],["interptype"],["array"]],[["array"],["hasafenum"]]]],[5,"transform","","Transform(Affine) an Image",null,[[["i64"],["array"],["array"],["interptype"],["bool"]],[["array"],["hasafenum"]]]],[5,"rotate","","Rotate an Image",null,[[["array"],["f64"],["interptype"],["bool"]],[["array"],["hasafenum"]]]],[5,"translate","","Translate an Image",null,[[["f32"],["i64"],["array"],["interptype"]],[["array"],["hasafenum"]]]],[5,"scale","","Scale an Image",null,[[["f32"],["i64"],["array"],["interptype"]],[["array"],["hasafenum"]]]],[5,"skew","","Skew an image",null,[[["f32"],["i64"],["array"],["interptype"],["bool"]],[["array"],["hasafenum"]]]],[5,"histogram","","Compute Histogram of an Array",null,[[["u32"],["array"],["f64"]],[["array",["u32"]],["u32"]]]],[5,"dilate","","Dilate an Image",null,[[["array"]],["array"]]],[5,"erode","","Erode an Image",null,[[["array"]],["array"]]],[5,"dilate3","","Dilate a Volume",null,[[["array"]],["array"]]],[5,"erode3","","Erode a Volume",null,[[["array"]],["array"]]],[5,"bilateral","","Bilateral Filter.",null,[[["f32"],["array"],["bool"]],["array"]]],[5,"mean_shift","","Meanshift Filter.",null,[[["f32"],["u32"],["array"],["bool"]],["array"]]],[5,"medfilt","","Median filter",null,[[["bordertype"],["array"],["u64"]],["array"]]],[5,"minfilt","","Box filter with minimum as box operation",null,[[["bordertype"],["array"],["u64"]],["array"]]],[5,"maxfilt","","Box filter with maximum as box operation",null,[[["bordertype"],["array"],["u64"]],["array"]]],[5,"gaussian_kernel","","Creates a Gaussian Kernel.",null,[[["f64"],["i32"]],[["array",["f32"]],["f32"]]]],[5,"color_space","","Color space conversion",null,[[["colorspace"],["array"]],["array"]]],[5,"regions","","Find blobs in given image.",null,[[["array"],["connectivity"]],["array"]]],[5,"sobel","","Sobel Operator",null,[[["u32"],["array"]]]],[5,"hist_equal","","Histogram Equalization",null,[[["array"],["array"]],["array"]]],[5,"rgb2gray","","Color(RGB) to Grayscale conversion",null,[[["f32"],["array"]],["array"]]],[5,"gray2rgb","","Grayscale to Color(RGB) conversion",null,[[["f32"],["array"]],["array"]]],[5,"hsv2rgb","","HSV to RGB color space conversion",null,[[["array"]],["array"]]],[5,"rgb2hsv","","RGB to HSV color space conversion",null,[[["array"]],["array"]]],[5,"unwrap","","Generate an array with image windows as columns",null,[[["i64"],["array"],["bool"]],[["array"],["hasafenum"]]]],[5,"wrap","","Converts unwrapped image to an image",null,[[["i64"],["array"],["bool"]],[["array"],["hasafenum"]]]],[5,"sat","","Summed area table of an Image",null,[[["array"]],["array"]]],[5,"rgb2ycbcr","","RGB to YCbCr colorspace converter.",null,[[["array"],["yccstd"]],["array"]]],[5,"ycbcr2rgb","","YCbCr to RGB colorspace converter.",null,[[["array"],["yccstd"]],["array"]]],[5,"is_imageio_available","","Function to check if Image I/O is available",null,[[],["bool"]]],[5,"transform_coords","","Transform input coordinates",null,[[["f32"],["array"]],["array"]]],[5,"moments","","Find Image moments",null,[[["array"],["momenttype"]],[["array",["f32"]],["f32"]]]],[5,"moments_all","","Find Image moment for whole image",null,[[["array"],["momenttype"]],["f64"]]],[5,"medfilt1","","One dimensional median filter on image",null,[[["bordertype"],["array"],["u64"]],["array"]]],[5,"canny","","Canny edge detection operator",null,[[["f32"],["u32"],["array"],["cannythresholdtype"],["bool"]],[["array",["bool"]],["bool"]]]],[5,"anisotropic_diffusion","","Anisotropic smoothing filter",null,[[["f32"],["u32"],["array"],["fluxfn"],["diffusioneq"]],["array"]]],[5,"confidence_cc","","Segment image based on similar pixel characteristics",null,[[["array"],["u32"],["array"],["f64"]],["array"]]],[5,"iterative_deconv","","Iterative Deconvolution",null,[[["f32"],["u32"],["array"],["array"],["iterativedeconvalgo"]],["array"]]],[5,"inverse_deconv","","Inverse deconvolution",null,[[["f32"],["array"],["array"],["inversedeconvalgo"]],["array"]]],[5,"svd","","Perform Singular Value Decomposition",null,[[["array"]]]],[5,"svd_inplace","","Perform Singular Value Decomposition inplace",null,[[["array"]]]],[5,"lu","","Perform LU decomposition",null,[[["array"]]]],[5,"lu_inplace","","Perform inplace LU decomposition",null,[[["array"],["bool"]],[["array",["i32"]],["i32"]]]],[5,"qr","","Perform QR decomposition",null,[[["array"]]]],[5,"qr_inplace","","Perform inplace QR decomposition",null,[[["array"]],["array"]]],[5,"cholesky","","Perform Cholesky decomposition",null,[[["array"],["bool"]]]],[5,"cholesky_inplace","","Perform inplace Cholesky decomposition",null,[[["array"],["bool"]],["i32"]]],[5,"solve","","Solve a system of equations",null,[[["matprop"],["array"]],["array"]]],[5,"solve_lu","","Solve a system of equations",null,[[["matprop"],["array"],["array"]],["array"]]],[5,"inverse","","Compute inverse of a matrix",null,[[["matprop"],["array"]],["array"]]],[5,"rank","","Find rank of a matrix",null,[[["f64"],["array"]],["u32"]]],[5,"det","","Find the determinant of the matrix",null,[[["array"]]]],[5,"norm","","Find the norm of a matrix",null,[[["array"],["f64"],["normtype"]],["f64"]]],[5,"is_lapack_available","","Function to check if lapack support is available",null,[[],["bool"]]],[5,"pinverse","","Psuedo Inverse of Matrix",null,[[["matprop"],["f64"],["array"]],["array"]]],[5,"convolve2_nn","","Convolution Integral for two dimensional data",null,[[["array"],["dim4"]],["array"]]],[5,"convolve2_gradient_nn","","Backward pass gradient of 2D convolution",null,[[["convgradienttype"],["array"],["dim4"]],["array"]]],[5,"set_seed","","Set seed for random number generation",null,[[["u64"]]]],[5,"get_seed","","Get the seed of random number generator",null,[[],["u64"]]],[5,"randu","","Create random numbers from uniform distribution",null,[[["dim4"]],["array"]]],[5,"randn","","Create random numbers from normal distribution",null,[[["dim4"]],["array"]]],[5,"get_default_random_engine","","Get default random engine",null,[[],["randomengine"]]],[5,"set_default_random_engine_type","","Set the random engine type for default random number…",null,[[["randomenginetype"]]]],[5,"random_uniform","","Generate array of uniform numbers using a random engine",null,[[["randomengine"],["dim4"]],["array"]]],[5,"random_normal","","Generate array of normal numbers using a random engine",null,[[["randomengine"],["dim4"]],["array"]]],[5,"approx1","","Perform signal interpolation for 1d signals",null,[[["f32"],["array"],["array"],["interptype"]],["array"]]],[5,"approx1_v2","","Same as approx1 but uses existing Array as output",null,[[["f32"],["array"],["array"],["array"],["interptype"]]]],[5,"approx1_uniform","","Perform signal interpolation for 1d signals along…",null,[[["f32"],["array"],["i32"],["array"],["f64"],["interptype"]],["array"]]],[5,"approx1_uniform_v2","","Same as approx1_uniform but uses existing Array as output",null,[[["f32"],["array"],["array"],["array"],["i32"],["f64"],["interptype"]]]],[5,"approx2","","Perform signal interpolation for 2d signals",null,[[["f32"],["array"],["array"],["interptype"]],["array"]]],[5,"approx2_v2","","Same as approx2 but uses existing Array as output",null,[[["f32"],["array"],["array"],["array"],["interptype"]]]],[5,"approx2_uniform","","Perform signal interpolation for 2d signals along a…",null,[[["f32"],["array"],["i32"],["array"],["f64"],["interptype"]],["array"]]],[5,"approx2_uniform_v2","","Same as approx2_uniform but uses existing Array as output",null,[[["f32"],["array"],["array"],["array"],["i32"],["f64"],["interptype"]]]],[5,"set_fft_plan_cache_size","","Set fft plan cache size",null,[[["usize"]]]],[5,"fft","","Fast fourier transform for 1d signals",null,[[["i64"],["f64"],["array"]],["array"]]],[5,"fft2","","Fast fourier transform for 2d signals",null,[[["i64"],["array"],["f64"]],["array"]]],[5,"fft3","","Fast fourier transform for 3d signals",null,[[["i64"],["array"],["f64"]],["array"]]],[5,"ifft","","Inverse fast fourier transform for 1d signals",null,[[["i64"],["f64"],["array"]],["array"]]],[5,"ifft2","","Inverse fast fourier transform for 2d signals",null,[[["i64"],["array"],["f64"]],["array"]]],[5,"ifft3","","Inverse fast fourier transform for 3d signals",null,[[["i64"],["array"],["f64"]],["array"]]],[5,"convolve1","","1d convolution",null,[[["array"],["array"],["convdomain"],["convmode"]],["array"]]],[5,"convolve2","","2d convolution",null,[[["array"],["array"],["convdomain"],["convmode"]],["array"]]],[5,"convolve3","","3d convolution",null,[[["array"],["array"],["convdomain"],["convmode"]],["array"]]],[5,"convolve2_sep","","Separable convolution for 2d signals",null,[[["array"],["array"],["convmode"]],["array"]]],[5,"fft_convolve1","","1d convolution using fast-fourier transform",null,[[["array"],["array"],["convmode"]],["array"]]],[5,"fft_convolve2","","2d convolution using fast-fourier transform",null,[[["array"],["array"],["convmode"]],["array"]]],[5,"fft_convolve3","","3d convolution using fast-fourier transform",null,[[["array"],["array"],["convmode"]],["array"]]],[5,"fir","","Finite impulse filter",null,[[["array"],["array"]],["array"]]],[5,"iir","","Infinite impulse response filter",null,[[["array"]],[["array"],["hasafenum"]]]],[5,"fft_inplace","","In place 1d dimensional Fast fourier transform",null,[[["array"],["f64"]]]],[5,"fft2_inplace","","In place 2d dimensional Fast fourier transform",null,[[["array"],["f64"]]]],[5,"fft3_inplace","","In place 3d dimensional Fast fourier transform",null,[[["array"],["f64"]]]],[5,"ifft_inplace","","In place 1d dimensional inverse fast fourier transform",null,[[["array"],["f64"]]]],[5,"ifft2_inplace","","In place 2d dimensional inverse fast fourier transform",null,[[["array"],["f64"]]]],[5,"ifft3_inplace","","In place 3d dimensional inverse fast fourier transform",null,[[["array"],["f64"]]]],[5,"fft_r2c","","1d Real to Complex fast fourier transform",null,[[["i64"],["f64"],["array"]],[["array",["complex"]],["complex"]]]],[5,"fft2_r2c","","2d Real to Complex fast fourier transform",null,[[["i64"],["array"],["f64"]],[["array",["complex"]],["complex"]]]],[5,"fft3_r2c","","3d Real to Complex fast fourier transform",null,[[["i64"],["array"],["f64"]],[["array",["complex"]],["complex"]]]],[5,"fft_c2r","","1d Complex to Real fast fourier transform",null,[[["f64"],["array"],["bool"]],["array"]]],[5,"fft2_c2r","","2d Complex to Real fast fourier transform",null,[[["f64"],["array"],["bool"]],["array"]]],[5,"fft3_c2r","","3d Complex to Real fast fourier transform",null,[[["f64"],["array"],["bool"]],["array"]]],[5,"sparse","","Create sprase matrix from arrays",null,[[["array"],["array"],["u64"],["sparseformat"]],["array"]]],[5,"sparse_from_host","","Create sprase matrix from data on host memory",null,[[["u64"],["sparseformat"]],["array"]]],[5,"sparse_from_dense","","Convert dense array to sparse array",null,[[["array"],["sparseformat"]],["array"]]],[5,"sparse_convert_to","","Convert between sparse formats",null,[[["array"],["sparseformat"]],["array"]]],[5,"sparse_to_dense","","Convert sparse array to dense array",null,[[["array"]],["array"]]],[5,"sparse_get_info","","Get sparse Array information",null,[[["array"]]]],[5,"sparse_get_values","","Get values of sparse Array",null,[[["array"]],["array"]]],[5,"sparse_get_row_indices","","Get row indices Array",null,[[["array"]],[["array",["i32"]],["i32"]]]],[5,"sparse_get_col_indices","","Get cololumn indices Array",null,[[["array"]],[["array",["i32"]],["i32"]]]],[5,"sparse_get_nnz","","Get number of non-zero elements in sparse array",null,[[["array"]],["i64"]]],[5,"sparse_get_format","","Get sparse format",null,[[["array"]],["sparseformat"]]],[5,"median","","Find the median along a given dimension",null,[[["i64"],["array"]],["array"]]],[5,"mean","","Mean along specified dimension",null,[[["i64"],["array"]],["array"]]],[5,"stdev","","Standard deviation along specified dimension",null,[[["i64"],["array"]],["array"]]],[5,"mean_weighted","","Weighted mean along specified dimension",null,[[["i64"],["array"],["array"]],["array"]]],[5,"var_weighted","","Weight variance along specified dimension",null,[[["i64"],["array"],["array"]],["array"]]],[5,"var","","Compute Variance along a specific dimension",null,[[["i64"],["array"],["bool"]],["array"]]],[5,"cov","","Compute covariance of two Arrays",null,[[["array"],["bool"]],["array"]]],[5,"var_all","","Compute Variance of all elements",null,[[["array"],["bool"]]]],[5,"mean_all","","Compute mean of all data",null,[[["array"]]]],[5,"stdev_all","","Compute standard deviation of all data",null,[[["array"]]]],[5,"median_all","","Compute median of all data",null,[[["array"]]]],[5,"mean_all_weighted","","Compute weighted mean of all data",null,[[["array"],["array"]]]],[5,"var_all_weighted","","Compute weighted variance of all data",null,[[["array"],["array"]]]],[5,"corrcoef","","Compute correlation coefficient",null,[[["array"]]]],[5,"topk","","Find top k elements along a given dimension",null,[[["u32"],["array"],["i32"],["topkfn"]]]],[5,"meanvar","","Calculate mean and variance in single API call",null,[[["i64"],["array"],["variancebias"],["array"]]]],[5,"get_size","","Get size, in bytes, of the arrayfire native type",null,[[["dtype"]],["usize"]]],[5,"fast","","Fast feature detector",null,[[["f32"],["u32"],["array"],["bool"]],["features"]]],[5,"harris","","Harris corner detector.",null,[[["f32"],["u32"],["array"]],["features"]]],[5,"orb","","ORB feature descriptor",null,[[["f32"],["u32"],["array"],["bool"]]]],[5,"hamming_matcher","","Hamming feature matcher",null,[[["i64"],["u32"],["array"]]]],[5,"nearest_neighbour","","Nearest Neighbour.",null,[[["i64"],["u32"],["array"],["matchtype"]]]],[5,"match_template","","Image matching",null,[[["array"],["matchtype"]],["array"]]],[5,"susan","","SUSAN corner detector.",null,[[["f32"],["u32"],["array"]],["features"]]],[5,"dog","","Difference of Gaussians.",null,[[["array"],["i32"]],["array"]]],[5,"homography","","Homography estimation",null,[[["f32"],["homographytype"],["u32"],["array"]]]],[11,"new","","Constructs a new Array object",30,[[["dim4"]],["self"]]],[11,"new_strided","","Constructs a new Array object from strided data",30,[[["i64"],["dim4"]],["self"]]],[11,"new_empty","","Constructs a new Array object of specified dimensions and…",30,[[["dim4"]],["self"]]],[11,"get_backend","","Returns the backend of the Array",30,[[["self"]],["backend"]]],[11,"get_device_id","","Returns the device identifier(integer) on which the Array…",30,[[["self"]],["i32"]]],[11,"elements","","Returns the number of elements in the Array",30,[[["self"]],["usize"]]],[11,"get_type","","Returns the Array data type",30,[[["self"]],["dtype"]]],[11,"dims","","Returns the dimensions of the Array",30,[[["self"]],["dim4"]]],[11,"strides","","Returns the strides of the Array",30,[[["self"]],["dim4"]]],[11,"numdims","","Returns the number of dimensions of the Array",30,[[["self"]],["u32"]]],[11,"offset","","Returns the offset to the pointer from where data begins",30,[[["self"]],["i64"]]],[11,"get","","Returns the native FFI handle for Rust object `Array`",30,[[["self"]],["i64"]]],[11,"set","","Returns the native FFI handle for Rust object `Array`",30,[[["i64"],["self"]]]],[11,"host","","Copies the data from the Array to the mutable slice `data`",30,[[["self"]]]],[11,"eval","","Evaluates any pending lazy expressions that represent the…",30,[[["self"]]]],[11,"copy","","Makes an copy of the Array",30,[[["self"]],["self"]]],[11,"is_empty","","Check if Array is empty",30,[[["self"]],["bool"]]],[11,"is_scalar","","Check if Array is scalar",30,[[["self"]],["bool"]]],[11,"is_row","","Check if Array is a row",30,[[["self"]],["bool"]]],[11,"is_column","","Check if Array is a column",30,[[["self"]],["bool"]]],[11,"is_vector","","Check if Array is a vector",30,[[["self"]],["bool"]]],[11,"is_complex","","Check if Array is of complex type",30,[[["self"]],["bool"]]],[11,"is_double","","Check if Array's numerical type is of double precision",30,[[["self"]],["bool"]]],[11,"is_single","","Check if Array's numerical type is of single precision",30,[[["self"]],["bool"]]],[11,"is_real","","Check if Array is of real type",30,[[["self"]],["bool"]]],[11,"is_floating","","Check if Array is of single precision",30,[[["self"]],["bool"]]],[11,"is_integer","","Check if Array is of integral type",30,[[["self"]],["bool"]]],[11,"is_bool","","Check if Array is of boolean type",30,[[["self"]],["bool"]]],[11,"is_linear","","Check if Array's memory layout is continuous and one…",30,[[["self"]],["bool"]]],[11,"is_owner","","Check if Array's memory is owned by it and not a view of…",30,[[["self"]],["bool"]]],[11,"cast","","Cast the Array data type to `target_type`",30,[[["self"]],[["hasafenum"],["array"]]]],[11,"is_sparse","","Find if the current array is sparse",30,[[["self"]],["bool"]]],[11,"lock","","Lock the device buffer in the memory manager",30,[[["self"]]]],[11,"unlock","","Unlock the device buffer in the memory manager",30,[[["self"]]]],[11,"device_ptr","","Get the device pointer and lock the buffer in memory manager",30,[[["self"]],["u64"]]],[11,"get_allocated_bytes","","Get the size of physical allocated bytes.",30,[[["self"]],["usize"]]],[11,"new","","Create Dim4 object",31,[[],["self"]]],[11,"elements","","Get the number of elements represented by Dim4 object",31,[[["self"]],["u64"]]],[11,"ndims","","Get the number of dimensions of Dim4",31,[[["self"]],["usize"]]],[11,"get","","Get the dimensions as a slice of 4 values",31,[[["self"]]]],[11,"new","","Associated function to create a new Callback object",32,[[["errorcallback"]],["self"]]],[11,"call","","call invokes the error callback with `error_code`.",32,[[["self"],["aferror"]]]],[11,"mark","","Marks the event on the active computation queue.",33,[[["self"]]]],[11,"enqueue_wait","","Enqueues the event and all enqueued events on the active…",33,[[["self"]]]],[11,"block","","Blocks the calling thread on events until all events on…",33,[[["self"]]]],[11,"new","","Create a new Indexer object and set the dimension specific…",34,[[],["self"]]],[11,"set_index","","Set either Array or Seq to index an Array along `idx`…",34,[[["u32"],["self"],["option",["bool"]],["t"],["bool"]]]],[11,"len","","Get number of indexing objects set",34,[[["self"]],["usize"]]],[11,"is_empty","","Check if any indexing objects are set",34,[[["self"]],["bool"]]],[11,"get","","Get native(ArrayFire) resource handle",34,[[["self"]],["i64"]]],[11,"new","","Create a `Seq` that goes from `begin` to `end` at a step…",35,[[["t"]],["self"]]],[11,"begin","","Get begin index of Seq",35,[[["self"]],["t"]]],[11,"end","","Get end index of Seq",35,[[["self"]],["t"]]],[11,"step","","Get step size of Seq",35,[[["self"]],["t"]]],[11,"new","","Creates new Window object",36,[[["string"],["i32"]],["self"]]],[11,"set_position","","Set window starting position on the screen",36,[[["u32"],["self"]]]],[11,"set_title","","Set window title",36,[[["string"],["self"]]]],[11,"set_visibility","","Set window visibility",36,[[["self"],["bool"]]]],[11,"set_size","","Set window size",36,[[["u32"],["self"]]]],[11,"set_colormap","","Set color map to be used for rendering image, it can take…",36,[[["colormap"],["self"]]]],[11,"is_closed","","Returns true if the window close is triggered by the user",36,[[["self"]],["bool"]]],[11,"grid","","Setup display layout in multiview mode",36,[[["self"],["i32"]]]],[11,"show","","Used in multiview mode to swap back buffer with front…",36,[[["self"]]]],[11,"set_view","","Set the current sub-region to render",36,[[["self"],["i32"]]]],[11,"set_axes_titles","","Set chart axes titles",36,[[["self"],["string"]]]],[11,"set_axes_label_formats","","Set chart axes labels formats",36,[[["self"],["string"]]]],[11,"set_axes_limits_compute","","Set chart axes limits by computing limits from data",36,[[["array"],["self"],["option",["array"]],["bool"]]]],[11,"set_axes_limits_2d","","Set 2d chart axes limits",36,[[["f32"],["self"],["bool"]]]],[11,"set_axes_limits_3d","","Set 3d chart axes limits",36,[[["f32"],["self"],["bool"]]]],[11,"draw_image","","Render given Array as an image",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_plot2","","Render given two Array's `x` and `y` as a 2d line plot",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_plot3","","Render given Array's `x`, `y` and `z` as a 3d line plot",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_plot","","Render give Arrays of points as a 3d line plot",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_hist","","Render given Array as a histogram",36,[[["string"],["array"],["f64"],["self"],["option",["string"]]]]],[11,"draw_surface","","Render give Arrays as 3d surface",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_scatter2","","Render given Arrays as 2d scatter plot",36,[[["option",["string"]],["string"],["array"],["self"],["markertype"]]]],[11,"draw_scatter3","","Render given Arrays as 3d scatter plot",36,[[["option",["string"]],["string"],["array"],["self"],["markertype"]]]],[11,"draw_scatter","","Render give Array as 3d scatter plot",36,[[["option",["string"]],["string"],["array"],["self"],["markertype"]]]],[11,"draw_vector_field2","","Render given Arrays as 2d vector field",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_vector_field3","","Render given Arrays as 3d vector field",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"draw_vector_field","","Render given Array as vector field",36,[[["string"],["array"],["self"],["option",["string"]]]]],[11,"new","","Create a new random engine object",37,[[["option",["u64"]],["u64"],["randomenginetype"]],["self"]]],[11,"get_type","","Get random engine type",37,[[["self"]],["randomenginetype"]]],[11,"set_type","","Get random engine type",37,[[["self"],["randomenginetype"]]]],[11,"set_seed","","Set seed for random engine",37,[[["self"],["u64"]]]],[11,"get_seed","","Get seed of the random engine",37,[[["self"]],["u64"]]],[11,"get","","Returns the native FFI handle for Rust object `RandomEngine`",37,[[["self"]],["i64"]]],[11,"new","","Create and return an object of type Features",38,[[["u64"]],["self"]]],[11,"num_features","","Get total number of features found",38,[[["self"]],["i64"]]],[11,"xpos","","Get x coordinates Array",38,[[["self"]],[["array",["f32"]],["f32"]]]],[11,"ypos","","Get y coordinates Array",38,[[["self"]],[["array",["f32"]],["f32"]]]],[11,"score","","Get score Array",38,[[["self"]],[["array",["f32"]],["f32"]]]],[11,"orientation","","Get orientation Array",38,[[["self"]],[["array",["f32"]],["f32"]]]],[11,"size","","Get features size Array",38,[[["self"]],[["array",["f32"]],["f32"]]]],[11,"get","","Get the internal handle for Features object",38,[[["self"]],["i64"]]],[6,"ErrorCallback","","Signature of error handling callback function",null,null],[17,"PHILOX","","Default Philon RandomEngine that points to PHILOX_4X32_10",null,null],[17,"THREEFRY","","Default Threefry RandomEngine that points to…",null,null],[17,"MERSENNE","","Default Mersenne RandomEngine that points to…",null,null],[17,"DEFAULT_RANDOM_ENGINE","","Default RandomEngine that defaults to PHILOX",null,null],[8,"Convertable","","Type Trait to convert to an Array",null,null],[16,"OutType","","This type alias always points to `Self` which is the type…",39,null],[10,"convert","","Get an Array of implementors type",39,[[["self"]],["array"]]],[8,"ConstGenerator","","Type Trait to generate a constant Array of given size",null,null],[16,"OutType","","The type of Array object returned by generate function",40,null],[10,"generate","","Create an Array of `dims` size from scalar value `self`.",40,[[["self"],["dim4"]],["array"]]],[8,"Indexable","","Trait bound indicating indexability",null,null],[10,"set","","Set indexing object for a given dimension",41,[[["u32"],["option",["bool"]],["indexer"],["self"],["bool"]]]],[8,"HasAfEnum","","Types of the data that can be generated using ArrayFire…",null,null],[16,"InType","","This type alias points to `Self` always.",42,null],[16,"BaseType","","This type alias points to the data type used to hold real…",42,null],[16,"AbsOutType","","This type alias points to `f32` for all 32 bit size types…",42,null],[16,"ArgOutType","","This type alias points to `f64`/`f32` for floating point…",42,null],[16,"UnaryOutType","","This type alias is used to define the output Array type…",42,null],[16,"ComplexOutType","","This type alias points to complex type created from a…",42,null],[16,"MeanOutType","","This type alias points to a data type that can store the…",42,null],[16,"AggregateOutType","","This type alias points to a data type that can store the…",42,null],[16,"ProductOutType","","This type is different for b8 input type",42,null],[16,"SobelOutType","","This type alias points to the output type for given input…",42,null],[10,"get_af_dtype","","Return trait implmentors corresponding DType",42,[[],["dtype"]]],[8,"ImplicitPromote","","This is an internal trait defined and implemented by…",null,null],[16,"Output","","This type alias points to the type of the result obtained…",43,null],[8,"ComplexFloating","","Trait qualifier to accept complex data(numbers)",null,null],[8,"FloatingPoint","","Trait qualifier to accept either real or complex typed data",null,null],[11,"is_real","","Use to check if trait implementor is real number",44,[[],["bool"]]],[11,"is_complex","","Use to check if trait implementor is complex number",44,[[],["bool"]]],[8,"RealFloating","","Trait qualifier to accept real data(numbers)",null,null],[8,"RealNumber","","Trait qualifier indicating it can hold real numbers only",null,null],[8,"ConfidenceCCInput","","Trait qualifier for confidence connected components input",null,null],[8,"DeconvInput","","Trait qualifier for confidence connected components input",null,null],[8,"ReduceByKeyInput","","Trait qualifier for Reduction Key type",null,null],[8,"CovarianceComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"EdgeComputable","","Trait qualifier for given type indicating if edge…",null,null],[8,"MedianComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"MomentsComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"GrayRGBConvertible","","Trait qualifier for given type indicating conversion…",null,null],[8,"ImageFilterType","","Trait qualifier for type of Array's that are accepted by…",null,null],[8,"ImageNativeType","","Trait qualifier for type of Array's that are accepted by…",null,null],[8,"Scanable","","Trait qualifier for the type of Arrays accepted by scan…",null,null],[14,"mem_info","","Macro to print the current stats of ArrayFire's memory…",null,null],[14,"join_many","","Join multiple Arrays along a given dimension",null,null],[14,"af_print","","Print given message before printing out the Array to…",null,null],[14,"eval","","Evaluate arbitrary number of arrays",null,null],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"convert","","",30,[[["self"]],["array"]]],[11,"set","","",30,[[["u32"],["option",["bool"]],["indexer"],["self"],["bool"]]]],[11,"set","","",35,[[["u32"],["option",["bool"]],["indexer"],["self"],["bool"]]]],[11,"drop","","",30,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"drop","","",34,[[["self"]]]],[11,"drop","","",36,[[["self"]]]],[11,"drop","","",37,[[["self"]]]],[11,"drop","","",38,[[["self"]]]],[11,"from","","",36,[[["u64"]],["self"]]],[11,"from","","",37,[[["i64"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",3,[[["u32"]],["self"]]],[11,"from","","",6,[[["u32"]],["self"]]],[11,"from","","",7,[[["u32"]],["self"]]],[11,"from","","",8,[[["u32"]],["self"]]],[11,"from","","",12,[[["u32"]],["self"]]],[11,"from","","",17,[[["u32"]],["self"]]],[11,"from","","",18,[[["u32"]],["self"]]],[11,"from","","",19,[[["u32"]],["self"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",0,[[["self"]],["aferror"]]],[11,"clone","","",1,[[["self"]],["backend"]]],[11,"clone","","",2,[[["self"]],["dtype"]]],[11,"clone","","",3,[[["self"]],["interptype"]]],[11,"clone","","",4,[[["self"]],["bordertype"]]],[11,"clone","","",5,[[["self"]],["connectivity"]]],[11,"clone","","",6,[[["self"]],["convmode"]]],[11,"clone","","",7,[[["self"]],["convdomain"]]],[11,"clone","","",8,[[["self"]],["matchtype"]]],[11,"clone","","",9,[[["self"]],["colorspace"]]],[11,"clone","","",10,[[["self"]],["matprop"]]],[11,"clone","","",11,[[["self"]],["normtype"]]],[11,"clone","","",12,[[["self"]],["colormap"]]],[11,"clone","","",13,[[["self"]],["yccstd"]]],[11,"clone","","",14,[[["self"]],["homographytype"]]],[11,"clone","","",15,[[["self"]],["markertype"]]],[11,"clone","","",16,[[["self"]],["momenttype"]]],[11,"clone","","",17,[[["self"]],["sparseformat"]]],[11,"clone","","",18,[[["self"]],["binaryop"]]],[11,"clone","","",19,[[["self"]],["randomenginetype"]]],[11,"clone","","",20,[[["self"]],["scalar"]]],[11,"clone","","",21,[[["self"]],["cannythresholdtype"]]],[11,"clone","","",22,[[["self"]],["diffusioneq"]]],[11,"clone","","",23,[[["self"]],["fluxfn"]]],[11,"clone","","",24,[[["self"]],["topkfn"]]],[11,"clone","","",25,[[["self"]],["iterativedeconvalgo"]]],[11,"clone","","",26,[[["self"]],["inversedeconvalgo"]]],[11,"clone","","",27,[[["self"]],["convgradienttype"]]],[11,"clone","","",28,[[["self"]],["variancebias"]]],[11,"clone","","",29,[[["self"]],["cublasmathmode"]]],[11,"clone","","",31,[[["self"]],["dim4"]]],[11,"clone","","",35,[[["self"]],["seq"]]],[11,"clone","","",36,[[["self"]],["window"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"default","","",31,[[],["self"]]],[11,"default","","",33,[[],["self"]]],[11,"default","","",34,[[],["self"]]],[11,"default","","",35,[[],["self"]]],[11,"eq","","",0,[[["self"],["aferror"]],["bool"]]],[11,"eq","","",1,[[["self"],["backend"]],["bool"]]],[11,"eq","","",2,[[["dtype"],["self"]],["bool"]]],[11,"eq","","",3,[[["interptype"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["bordertype"]],["bool"]]],[11,"eq","","",5,[[["connectivity"],["self"]],["bool"]]],[11,"eq","","",6,[[["convmode"],["self"]],["bool"]]],[11,"eq","","",7,[[["convdomain"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["matchtype"]],["bool"]]],[11,"eq","","",9,[[["self"],["colorspace"]],["bool"]]],[11,"eq","","",10,[[["matprop"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["normtype"]],["bool"]]],[11,"eq","","",12,[[["self"],["colormap"]],["bool"]]],[11,"eq","","",13,[[["yccstd"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["homographytype"]],["bool"]]],[11,"eq","","",15,[[["self"],["markertype"]],["bool"]]],[11,"eq","","",16,[[["momenttype"],["self"]],["bool"]]],[11,"eq","","",17,[[["sparseformat"],["self"]],["bool"]]],[11,"eq","","",18,[[["self"],["binaryop"]],["bool"]]],[11,"eq","","",19,[[["self"],["randomenginetype"]],["bool"]]],[11,"eq","","",20,[[["self"],["scalar"]],["bool"]]],[11,"ne","","",20,[[["self"],["scalar"]],["bool"]]],[11,"eq","","",21,[[["self"],["cannythresholdtype"]],["bool"]]],[11,"eq","","",22,[[["self"],["diffusioneq"]],["bool"]]],[11,"eq","","",23,[[["self"],["fluxfn"]],["bool"]]],[11,"eq","","",24,[[["self"],["topkfn"]],["bool"]]],[11,"eq","","",25,[[["iterativedeconvalgo"],["self"]],["bool"]]],[11,"eq","","",26,[[["inversedeconvalgo"],["self"]],["bool"]]],[11,"eq","","",27,[[["convgradienttype"],["self"]],["bool"]]],[11,"eq","","",28,[[["self"],["variancebias"]],["bool"]]],[11,"eq","","",29,[[["cublasmathmode"],["self"]],["bool"]]],[11,"eq","","",31,[[["dim4"],["self"]],["bool"]]],[11,"ne","","",31,[[["dim4"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["result",["fmterror"]],["fmterror"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["result",["fmterror"]],["fmterror"]]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"div","","",30,[[["f64"],["complex",["f64"]]]]],[11,"div","","",30,[[["f32"],["complex",["f32"]]]]],[11,"div","","",30,[[["f64"]]]],[11,"div","","",30,[[["f32"]]]],[11,"div","","",30,[[["u64"]]]],[11,"div","","",30,[[["i64"]]]],[11,"div","","",30,[[["u32"]]]],[11,"div","","",30,[[["i32"]]]],[11,"div","","",30,[[["u8"]]]],[11,"div","","",30,[[["array"]]]],[11,"div","","",30,[[["array"]]]],[11,"rem","","",30,[[["array"]]]],[11,"rem","","",30,[[["array"]]]],[11,"sub","","",30,[[["f64"],["complex",["f64"]]]]],[11,"sub","","",30,[[["f32"],["complex",["f32"]]]]],[11,"sub","","",30,[[["f64"]]]],[11,"sub","","",30,[[["f32"]]]],[11,"sub","","",30,[[["u64"]]]],[11,"sub","","",30,[[["i64"]]]],[11,"sub","","",30,[[["u32"]]]],[11,"sub","","",30,[[["i32"]]]],[11,"sub","","",30,[[["u8"]]]],[11,"sub","","",30,[[["array"]]]],[11,"sub","","",30,[[["array"]]]],[11,"add","","",30,[[["f64"],["complex",["f64"]]]]],[11,"add","","",30,[[["f32"],["complex",["f32"]]]]],[11,"add","","",30,[[["f64"]]]],[11,"add","","",30,[[["f32"]]]],[11,"add","","",30,[[["u64"]]]],[11,"add","","",30,[[["i64"]]]],[11,"add","","",30,[[["u32"]]]],[11,"add","","",30,[[["i32"]]]],[11,"add","","",30,[[["u8"]]]],[11,"add","","",30,[[["array"]]]],[11,"add","","",30,[[["array"]]]],[11,"mul","","",30,[[["f64"],["complex",["f64"]]]]],[11,"mul","","",30,[[["f32"],["complex",["f32"]]]]],[11,"mul","","",30,[[["f64"]]]],[11,"mul","","",30,[[["f32"]]]],[11,"mul","","",30,[[["u64"]]]],[11,"mul","","",30,[[["i64"]]]],[11,"mul","","",30,[[["u32"]]]],[11,"mul","","",30,[[["i32"]]]],[11,"mul","","",30,[[["u8"]]]],[11,"mul","","",30,[[["array"]]]],[11,"mul","","",30,[[["array"]]]],[11,"neg","","",30,[[]]],[11,"add_assign","","",30,[[["self"],["array"]]]],[11,"sub_assign","","",30,[[["self"],["array"]]]],[11,"mul_assign","","",30,[[["self"],["array"]]]],[11,"div_assign","","",30,[[["self"],["array"]]]],[11,"rem_assign","","",30,[[["self"],["array"]]]],[11,"bitand","","",30,[[["array"]]]],[11,"bitand","","",30,[[["array"]]]],[11,"bitor","","",30,[[["array"]]]],[11,"bitor","","",30,[[["array"]]]],[11,"bitxor","","",30,[[["array"]]]],[11,"bitxor","","",30,[[["array"]]]],[11,"shl","","",30,[[["array"]]]],[11,"shl","","",30,[[["array"]]]],[11,"shr","","",30,[[["array"]]]],[11,"shr","","",30,[[["array"]]]],[11,"bitand_assign","","",30,[[["self"],["array"]]]],[11,"bitor_assign","","",30,[[["self"],["array"]]]],[11,"bitxor_assign","","",30,[[["self"],["array"]]]],[11,"shl_assign","","",30,[[["self"],["array"]]]],[11,"shr_assign","","",30,[[["self"],["array"]]]],[11,"index","","",31,[[["self"],["usize"]],["u64"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"is_real","","Use to check if trait implementor is real number",44,[[],["bool"]]],[11,"is_complex","","Use to check if trait implementor is complex number",44,[[],["bool"]]]],"p":[[4,"AfError"],[4,"Backend"],[4,"DType"],[4,"InterpType"],[4,"BorderType"],[4,"Connectivity"],[4,"ConvMode"],[4,"ConvDomain"],[4,"MatchType"],[4,"ColorSpace"],[4,"MatProp"],[4,"NormType"],[4,"ColorMap"],[4,"YCCStd"],[4,"HomographyType"],[4,"MarkerType"],[4,"MomentType"],[4,"SparseFormat"],[4,"BinaryOp"],[4,"RandomEngineType"],[4,"Scalar"],[4,"CannyThresholdType"],[4,"DiffusionEq"],[4,"FluxFn"],[4,"TopkFn"],[4,"IterativeDeconvAlgo"],[4,"InverseDeconvAlgo"],[4,"ConvGradientType"],[4,"VarianceBias"],[4,"CublasMathMode"],[3,"Array"],[3,"Dim4"],[3,"Callback"],[3,"Event"],[3,"Indexer"],[3,"Seq"],[3,"Window"],[3,"RandomEngine"],[3,"Features"],[8,"Convertable"],[8,"ConstGenerator"],[8,"Indexable"],[8,"HasAfEnum"],[8,"ImplicitPromote"],[8,"FloatingPoint"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);