var searchIndex = JSON.parse('{\
"af_cuda_interop":{"doc":"af-cuda-interop package is to used only when the…","i":[[5,"get_device_native_id","af_cuda_interop","Get active device\'s id in CUDA context",null,[[]]],[5,"set_device_native_id","","Set active device using CUDA context\'s id",null,[[]]],[5,"get_stream","","Get CUDA stream of active CUDA device",null,[[],["cudastream_t",6]]]],"p":[]},\
"af_opencl_interop":{"doc":"af-opencl-interop package is to used only when the…","i":[[4,"VendorPlatform","af_opencl_interop","OpenCL Vendor Platform",null,null],[13,"AMD","","",0,null],[13,"APPLE","","",0,null],[13,"INTEL","","",0,null],[13,"NVIDIA","","",0,null],[13,"BEIGNET","","",0,null],[13,"POCL","","",0,null],[13,"UNKNOWN","","",0,null],[4,"DeviceType","","OpenCL Device Type",null,null],[13,"DEFAULT","","",1,null],[13,"CPU","","",1,null],[13,"GPU","","",1,null],[13,"ACCEL","","",1,null],[13,"ALL","","",1,null],[5,"get_context","","Get the handle to active ArrayFire OpenCL context",null,[[],["cl_context",6]]],[5,"get_queue","","Get the handle to active ArrayFire OpenCL command queue",null,[[],["cl_command_queue",6]]],[5,"get_device_id","","Get the handle to active ArrayFire OpenCL device",null,[[],["cl_device_id",6]]],[5,"set_device_id","","Set the cl_device_id as the active ArrayFire OpenCL device",null,[[["cl_device_id",6]]]],[5,"add_device_context","","Push user provided device, context and queue tuple to…",null,[[["cl_command_queue",6],["cl_context",6],["cl_device_id",6]]]],[5,"set_device_context","","Set the device identified by device & context pair as the…",null,[[["cl_context",6],["cl_device_id",6]]]],[5,"delete_device_context","","Remove the user provided device, context pair from…",null,[[["cl_context",6],["cl_device_id",6]]]],[5,"get_device_type","","",null,[[],["devicetype",4]]],[5,"get_platform","","Fetch Active ArrayFire device\'s vendor platform",null,[[],["vendorplatform",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["vendorplatform",4]]],[11,"clone","","",1,[[],["devicetype",4]]],[11,"eq","","",0,[[["vendorplatform",4]]]],[11,"eq","","",1,[[["devicetype",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"VendorPlatform"],[4,"DeviceType"]]},\
"arrayfire":{"doc":"ArrayFire is a high performance software library for…","i":[[3,"Array","arrayfire","A multidimensional data container",null,null],[3,"Dim4","","Dim4 is used to store Array dimensions",null,null],[3,"Callback","","Structure holding handle to callback function",null,null],[3,"Event","","RAII construct to manage ArrayFire events",null,null],[3,"Indexer","","Struct to manage an array of resources of type…",null,null],[3,"RandomEngine","","Random number generator engine",null,null],[3,"Seq","","Sequences are used for indexing Arrays",null,null],[3,"Window","","Used to render Array objects",null,null],[3,"Features","","A set of Array objects (usually, used in Computer vision…",null,null],[4,"AfError","","Error codes",null,null],[13,"SUCCESS","","The function returned successfully",0,null],[13,"ERR_NO_MEM","","The system or device ran out of memory",0,null],[13,"ERR_DRIVER","","There was an error in the device driver",0,null],[13,"ERR_RUNTIME","","There was an error with the runtime environment",0,null],[13,"ERR_INVALID_ARRAY","","The input array is not a valid Array object",0,null],[13,"ERR_ARG","","One of the function arguments is incorrect",0,null],[13,"ERR_SIZE","","The size is incorrect",0,null],[13,"ERR_TYPE","","The type is not suppported by this function",0,null],[13,"ERR_DIFF_TYPE","","The type of the input arrays are not compatible",0,null],[13,"ERR_BATCH","","Function does not support GFOR / batch mode",0,null],[13,"ERR_DEVICE","","Input does not belong to the current device",0,null],[13,"ERR_NOT_SUPPORTED","","The option is not supported",0,null],[13,"ERR_NOT_CONFIGURED","","This build of ArrayFire does not support this feature",0,null],[13,"ERR_NO_DBL","","This device does not support double",0,null],[13,"ERR_NO_GFX","","This build of ArrayFire was not built with graphics or…",0,null],[13,"ERR_INTERNAL","","There was an internal error either in ArrayFire or in a…",0,null],[13,"ERR_UNKNOWN","","Unknown Error",0,null],[4,"Backend","","Compute/Acceleration Backend",null,null],[13,"DEFAULT","","Default backend order: OpenCL -> CUDA -> CPU",1,null],[13,"CPU","","CPU a.k.a sequential algorithms",1,null],[13,"CUDA","","CUDA Compute Backend",1,null],[13,"OPENCL","","OpenCL Compute Backend",1,null],[4,"DType","","Types of Array data type",null,null],[13,"F32","","32 bit float",2,null],[13,"C32","","32 bit complex float",2,null],[13,"F64","","64 bit float",2,null],[13,"C64","","64 bit complex float",2,null],[13,"B8","","8 bit boolean",2,null],[13,"S32","","32 bit signed integer",2,null],[13,"U32","","32 bit unsigned integer",2,null],[13,"U8","","8 bit unsigned integer",2,null],[13,"S64","","64 bit signed integer",2,null],[13,"U64","","64 bit unsigned integer",2,null],[13,"S16","","16 bit signed integer",2,null],[13,"U16","","16 bit unsigned integer",2,null],[13,"F16","","16 bit floating point",2,null],[4,"InterpType","","Dictates the interpolation method to be used by a function",null,null],[13,"NEAREST","","Nearest Neighbor interpolation method",3,null],[13,"LINEAR","","Linear interpolation method",3,null],[13,"BILINEAR","","Bilinear interpolation method",3,null],[13,"CUBIC","","Cubic interpolation method",3,null],[13,"LOWER","","Floor indexed",3,null],[13,"LINEAR_COSINE","","Linear interpolation with cosine smoothing",3,null],[13,"BILINEAR_COSINE","","Bilinear interpolation with cosine smoothing",3,null],[13,"BICUBIC","","Bicubic interpolation",3,null],[13,"CUBIC_SPLINE","","Cubic interpolation with Catmull-Rom splines",3,null],[13,"BICUBIC_SPLINE","","Bicubic interpolation with Catmull-Rom splines",3,null],[4,"BorderType","","Helps determine how to pad kernels along borders",null,null],[13,"ZERO","","Pad using zeros",4,null],[13,"SYMMETRIC","","Pad using mirrored values along border",4,null],[13,"CLAMP_TO_EDGE","","Out of bound values are clamped to the edge",4,null],[13,"PERIODIC","","Out of bound values are mapped to range of the dimension…",4,null],[4,"Connectivity","","Used by `regions` function to identify type of connectivity",null,null],[13,"FOUR","","North-East-South-West (N-E-S-W) connectivity from given…",5,null],[13,"EIGHT","","N-NE-E-SE-S-SW-W-NW connectivity from given pixel/point",5,null],[4,"ConvMode","","Helps determine the size of output of convolution",null,null],[13,"DEFAULT","","Default convolution mode where output size is same as…",6,null],[13,"EXPAND","","Output of convolution is expanded based on signal and…",6,null],[4,"ConvDomain","","Helps determine if convolution is in Spatial or Frequency…",null,null],[13,"AUTO","","ArrayFire chooses whether the convolution will be in…",7,null],[13,"SPATIAL","","Convoltion in spatial domain",7,null],[13,"FREQUENCY","","Convolution in frequency domain",7,null],[4,"MatchType","","Error metric used by `matchTemplate` function",null,null],[13,"SAD","","Sum of Absolute Differences",8,null],[13,"ZSAD","","Zero-mean Sum of Absolute Differences",8,null],[13,"LSAD","","Locally scaled Sum of Absolute Differences",8,null],[13,"SSD","","Sum of Squared Differences",8,null],[13,"ZSSD","","Zero-mean Sum of Squared Differences",8,null],[13,"LSSD","","Localy scaled Sum of Squared Differences",8,null],[13,"NCC","","Normalized Cross Correlation",8,null],[13,"ZNCC","","Zero-mean Normalized Cross Correlation",8,null],[13,"SHD","","Sum of Hamming Distances",8,null],[4,"ColorSpace","","Identify the color space of given image(Array)",null,null],[13,"GRAY","","Grayscale color space",9,null],[13,"RGB","","Red-Green-Blue color space",9,null],[13,"HSV","","Hue-Saturation-value color space",9,null],[4,"MatProp","","Helps determine the type of a Matrix",null,null],[13,"NONE","","Default (no-op)",10,null],[13,"TRANS","","Data needs to be transposed",10,null],[13,"CTRANS","","Data needs to be conjugate transposed",10,null],[13,"CONJ","","Matrix is upper triangular",10,null],[13,"UPPER","","Matrix needs to be conjugate",10,null],[13,"LOWER","","Matrix is lower triangular",10,null],[13,"DIAGUNIT","","Matrix diagonal has unitary values",10,null],[13,"SYM","","Matrix is symmetric",10,null],[13,"POSDEF","","Matrix is positive definite",10,null],[13,"ORTHOG","","Matrix is orthogonal",10,null],[13,"TRIDIAG","","Matrix is tri-diagonal",10,null],[13,"BLOCKDIAG","","Matrix is block-diagonal",10,null],[4,"NormType","","Norm type",null,null],[13,"VECTOR_1","","Treats input as a vector and return sum of absolute values",11,null],[13,"VECTOR_INF","","Treats input as vector and return max of absolute values",11,null],[13,"VECTOR_2","","Treats input as vector and returns euclidean norm",11,null],[13,"VECTOR_P","","Treats input as vector and returns the p-norm",11,null],[13,"MATRIX_1","","Return the max of column sums",11,null],[13,"MATRIX_INF","","Return the max of row sums",11,null],[13,"MATRIX_2","","Returns the max singular value (Currently not supported)",11,null],[13,"MATRIX_L_PQ","","Returns Lpq-norm",11,null],[4,"ColorMap","","Dictates what color map is used for Image rendering",null,null],[13,"DEFAULT","","Default color map is grayscale range [0-1]",12,null],[13,"SPECTRUM","","Visible spectrum color map",12,null],[13,"COLORS","","Colors",12,null],[13,"RED","","Red hue map",12,null],[13,"MOOD","","Mood color map",12,null],[13,"HEAT","","Heat color map",12,null],[13,"BLUE","","Blue hue map",12,null],[4,"YCCStd","","YCbCr Standards",null,null],[13,"YCC_601","","ITU-R BT.601 (formerly CCIR 601) standard",13,null],[13,"YCC_709","","ITU-R BT.709 standard",13,null],[13,"YCC_2020","","ITU-R BT.2020 standard",13,null],[4,"HomographyType","","Homography type",null,null],[13,"RANSAC","","RANdom SAmple Consensus algorithm",14,null],[13,"LMEDS","","Least Median of Squares",14,null],[4,"MarkerType","","Plotting markers",null,null],[13,"NONE","","No marker",15,null],[13,"POINT","","Pointer marker",15,null],[13,"CIRCLE","","Hollow circle marker",15,null],[13,"SQUARE","","Hollow Square marker",15,null],[13,"TRIANGLE","","Hollow Triangle marker",15,null],[13,"CROSS","","Cross-hair marker",15,null],[13,"PLUS","","Plus symbol marker",15,null],[13,"STAR","","Start symbol marker",15,null],[4,"MomentType","","Image moment types",null,null],[13,"M00","","Central moment of order (0 + 0)",16,null],[13,"M01","","Central moment of order (0 + 1)",16,null],[13,"M10","","Central moment of order (1 + 0)",16,null],[13,"M11","","Central moment of order (1 + 1)",16,null],[13,"FIRST_ORDER","","All central moments of order (0,0), (0,1), (1,0) and (1,1)",16,null],[4,"SparseFormat","","Sparse storage format type",null,null],[13,"DENSE","","Dense format",17,null],[13,"CSR","","Compressed sparse row format",17,null],[13,"CSC","","Compressed sparse coloumn format",17,null],[13,"COO","","Coordinate list (row, coloumn, value) tuples.",17,null],[4,"BinaryOp","","Binary operation types for generalized scan functions",null,null],[13,"ADD","","Addition operation",18,null],[13,"MUL","","Multiplication operation",18,null],[13,"MIN","","Minimum operation",18,null],[13,"MAX","","Maximum operation",18,null],[4,"RandomEngineType","","Random engine types",null,null],[13,"PHILOX_4X32_10","","Philox variant with N=4, W=32 and Rounds=10",19,null],[13,"THREEFRY_2X32_16","","Threefry variant with N=2, W=32 and Rounds=16",19,null],[13,"MERSENNE_GP11213","","Mersenne variant with MEXP = 11213",19,null],[4,"Scalar","","Scalar value types",null,null],[13,"F32","","32 bit float",20,null],[13,"C32","","32 bit complex float",20,null],[13,"F64","","64 bit float",20,null],[13,"C64","","64 bit complex float",20,null],[13,"B8","","8 bit boolean",20,null],[13,"S32","","32 bit signed integer",20,null],[13,"U32","","32 bit unsigned integer",20,null],[13,"U8","","8 bit unsigned integer",20,null],[13,"S64","","64 bit signed integer",20,null],[13,"U64","","64 bit unsigned integer",20,null],[13,"S16","","16 bit signed integer",20,null],[13,"U16","","16 bit unsigned integer",20,null],[4,"CannyThresholdType","","Canny edge detector threshold operations types",null,null],[13,"MANUAL","","User has to define canny thresholds manually",21,null],[13,"OTSU","","Determine canny algorithm high threshold using Otsu…",21,null],[4,"DiffusionEq","","Anisotropic diffusion flux equation types",null,null],[13,"QUADRATIC","","Quadratic flux function",22,null],[13,"EXPONENTIAL","","Exponential flux function",22,null],[13,"DEFAULT","","Default flux function, a.k.a exponential",22,null],[4,"FluxFn","","Diffusion equation types",null,null],[13,"GRADIENT","","Quadratic flux function",23,null],[13,"MCDE","","Modified curvature diffusion equation",23,null],[13,"DEFAULT","","Default diffusion method, Gradient",23,null],[4,"TopkFn","","topk function ordering",null,null],[13,"MIN","","Top k min values",24,null],[13,"MAX","","Top k max values",24,null],[13,"DEFAULT","","Default option(max)",24,null],[4,"IterativeDeconvAlgo","","Iterative Deconvolution Algorithm",null,null],[13,"LANDWEBER","","Land-Weber Algorithm",25,null],[13,"RICHARDSONLUCY","","Richardson-Lucy Algorithm",25,null],[13,"DEFAULT","","Default is Land-Weber algorithm",25,null],[4,"InverseDeconvAlgo","","Inverse Deconvolution Algorithm",null,null],[13,"TIKHONOV","","Tikhonov algorithm",26,null],[13,"DEFAULT","","Default is Tikhonov algorithm",26,null],[4,"ConvGradientType","","Gradient mode for convolution",null,null],[13,"FILTER","","Filter Gradient",27,null],[13,"DATA","","Data Gradient",27,null],[13,"BIAS","","Biased Gradient",27,null],[13,"DEFAULT","","Default is Data Gradient",27,null],[4,"VarianceBias","","Gradient mode for convolution",null,null],[13,"SAMPLE","","Sample variance",28,null],[13,"POPULATION","","Population variance",28,null],[13,"DEFAULT","","Default (Population) variance",28,null],[4,"CublasMathMode","","Gradient mode for convolution",null,null],[13,"TENSOR_OP","","To indicate use of Tensor Cores on CUDA capable GPUs",29,null],[13,"DEFAULT","","Default i.e. tensor core operations will be avoided by the…",29,null],[5,"abs","","Computes absolute value",null,[[["array",3]],["array",3]]],[5,"arg","","Computes phase value",null,[[["array",3]],["array",3]]],[5,"trunc","","Truncate the values in an Array",null,[[["array",3]],["array",3]]],[5,"sign","","Computes the sign of input Array values",null,[[["array",3]],["array",3]]],[5,"round","","Round the values in an Array",null,[[["array",3]],["array",3]]],[5,"floor","","Floor the values in an Array",null,[[["array",3]],["array",3]]],[5,"ceil","","Ceil the values in an Array",null,[[["array",3]],["array",3]]],[5,"sigmoid","","Compute sigmoid function",null,[[["array",3]],["array",3]]],[5,"expm1","","Compute e raised to the power of value -1",null,[[["array",3]],["array",3]]],[5,"erf","","Compute error function value",null,[[["array",3]],["array",3]]],[5,"erfc","","Compute the complementary error function value",null,[[["array",3]],["array",3]]],[5,"log10","","Compute logarithm base 10",null,[[["array",3]],["array",3]]],[5,"log1p","","Compute the logarithm of input Array + 1",null,[[["array",3]],["array",3]]],[5,"log2","","Compute logarithm base 2",null,[[["array",3]],["array",3]]],[5,"cbrt","","Compute the cube root",null,[[["array",3]],["array",3]]],[5,"tgamma","","Compute gamma function",null,[[["array",3]],["array",3]]],[5,"lgamma","","Compute the logarithm of absolute values of gamma function",null,[[["array",3]],["array",3]]],[5,"acosh","","Compute acosh",null,[[["array",3]],["array",3]]],[5,"acos","","Compute acos",null,[[["array",3]],["array",3]]],[5,"asin","","Compute asin",null,[[["array",3]],["array",3]]],[5,"asinh","","Compute asinh",null,[[["array",3]],["array",3]]],[5,"atan","","Compute atan",null,[[["array",3]],["array",3]]],[5,"atanh","","Compute atanh",null,[[["array",3]],["array",3]]],[5,"cos","","Compute cos",null,[[["array",3]],["array",3]]],[5,"cosh","","Compute cosh",null,[[["array",3]],["array",3]]],[5,"exp","","Compute e raised to the power of value",null,[[["array",3]],["array",3]]],[5,"log","","Compute the natural logarithm",null,[[["array",3]],["array",3]]],[5,"sin","","Compute sin",null,[[["array",3]],["array",3]]],[5,"sinh","","Compute sinh",null,[[["array",3]],["array",3]]],[5,"sqrt","","Compute the square root",null,[[["array",3]],["array",3]]],[5,"rsqrt","","Compute the reciprocal square root",null,[[["array",3]],["array",3]]],[5,"tan","","Compute tan",null,[[["array",3]],["array",3]]],[5,"tanh","","Compute tanh",null,[[["array",3]],["array",3]]],[5,"real","","Extract real values from a complex Array",null,[[["array",3]],["array",3]]],[5,"imag","","Extract imaginary values from a complex Array",null,[[["array",3]],["array",3]]],[5,"cplx","","Create a complex Array from real Array",null,[[["array",3]],["array",3]]],[5,"conjg","","Compute the complex conjugate",null,[[["array",3]],["array",3]]],[5,"pow2","","Compute two raised to the power of value",null,[[["array",3]],["array",3]]],[5,"factorial","","Compute the factorial",null,[[["array",3]],["array",3]]],[5,"iszero","","Check if values are zero",null,[[["array",3]],["array",3]]],[5,"isinf","","Check if values are infinity",null,[[["array",3]],["array",3]]],[5,"isnan","","Check if values are NaN",null,[[["array",3]],["array",3]]],[5,"bitand","","Elementwise AND(bit) operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"bitor","","Elementwise OR(bit) operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"bitxor","","Elementwise XOR(bit) operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"neq","","Elementwise not equals comparison of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"and","","Elementwise logical and operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"or","","Elementwise logical or operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"minof","","Elementwise minimum operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"maxof","","Elementwise maximum operation of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"hypot","","Compute length of hypotenuse of two Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"add","","Addition of two Arrays",null,[[],["array",3]]],[5,"sub","","Subtraction of two Arrays",null,[[],["array",3]]],[5,"mul","","Multiplication of two Arrays",null,[[],["array",3]]],[5,"div","","Division of two Arrays",null,[[],["array",3]]],[5,"rem","","Compute remainder from two Arrays",null,[[],["array",3]]],[5,"shiftl","","Compute left shift",null,[[],["array",3]]],[5,"shiftr","","Compute right shift",null,[[],["array",3]]],[5,"modulo","","Compute modulo of two Arrays",null,[[],["array",3]]],[5,"atan2","","Calculate atan2 of two Arrays",null,[[],["array",3]]],[5,"cplx2","","Create complex array from two Arrays",null,[[],["array",3]]],[5,"root","","Compute root",null,[[],["array",3]]],[5,"pow","","Computer power",null,[[],["array",3]]],[5,"lt","","Perform `less than` comparison operation",null,[[],["array",3]]],[5,"gt","","Perform `greater than` comparison operation",null,[[],["array",3]]],[5,"le","","Perform `less than equals` comparison operation",null,[[],["array",3]]],[5,"ge","","Perform `greater than equals` comparison operation",null,[[],["array",3]]],[5,"eq","","Perform `equals` comparison operation",null,[[],["array",3]]],[5,"clamp","","Clamp the values of Array",null,[[["array",3]],["array",3]]],[5,"print","","Print data in the Array",null,[[["array",3]]]],[5,"print_gen","","Generalized Array print function",null,[[["string",3],["array",3],["option",4]]]],[5,"eval_multiple","","evaluate multiple arrays",null,[[["vec",3],["array",3]]]],[5,"set_manual_eval","","Set eval flag value",null,[[]]],[5,"is_eval_manual","","Get eval flag value",null,[[]]],[5,"set_backend","","Toggle backends between cuda, opencl or cpu",null,[[["backend",4]]]],[5,"get_backend_count","","Get the available backend count",null,[[]]],[5,"get_available_backends","","Get the available backends",null,[[],[["backend",4],["vec",3]]]],[5,"get_active_backend","","Get current active backend",null,[[],["backend",4]]],[5,"constant","","Create an Array with constant value",null,[[["constgenerator",8],["dim4",3]],["array",3]]],[5,"range","","Create a Range of values",null,[[["dim4",3]],[["array",3],["hasafenum",8]]]],[5,"iota","","Create a range of values",null,[[["dim4",3]],[["array",3],["hasafenum",8]]]],[5,"identity","","Create an identity array with 1\'s in diagonal",null,[[["dim4",3]],[["array",3],["hasafenum",8]]]],[5,"diag_create","","Create a diagonal matrix",null,[[["array",3]],["array",3]]],[5,"diag_extract","","Extract diagonal from a given Matrix",null,[[["array",3]],["array",3]]],[5,"join","","Join two arrays",null,[[["array",3]],["array",3]]],[5,"join_many","","Join multiple arrays",null,[[["vec",3],["array",3]],["array",3]]],[5,"tile","","Tile the input array along specified dimension",null,[[["array",3],["dim4",3]],["array",3]]],[5,"reorder_v2","","Reorder the array according to the new specified axes",null,[[["option",4],["array",3],["vec",3]],["array",3]]],[5,"reorder","","Reorder the array in specified order",null,[[["array",3],["dim4",3]],["array",3]]],[5,"shift","","\\\"Circular shift of values along specified dimension",null,[[["array",3]],["array",3]]],[5,"moddims","","Change the shape of the Array",null,[[["array",3],["dim4",3]],["array",3]]],[5,"flat","","Flatten the multidimensional Array to an 1D Array",null,[[["array",3]],["array",3]]],[5,"flip","","Flip the Array",null,[[["array",3]],["array",3]]],[5,"lower","","Create lower triangular matrix",null,[[["array",3]],["array",3]]],[5,"upper","","Create upper triangular matrix",null,[[["array",3]],["array",3]]],[5,"select","","Element wise conditional operator for Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"selectl","","Element wise conditional operator for Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"selectr","","Element wise conditional operator for Arrays",null,[[["array",3],["array",3]],["array",3]]],[5,"replace","","Inplace replace in Array based on a condition",null,[[["array",3],["array",3],["array",3]]]],[5,"replace_scalar","","Inplace replace in Array based on a condition",null,[[["array",3],["array",3]]]],[5,"pad","","Pad input Array along borders",null,[[["bordertype",4],["array",3],["dim4",3]],[["array",3],["hasafenum",8]]]],[5,"get_version","","Get ArrayFire Version Number",null,[[]]],[5,"get_revision","","Get ArrayFire Revision (commit) information of the library.",null,[[],["cow",4]]],[5,"info","","Print library meta-info",null,[[]]],[5,"info_string","","Return library meta-info as `String`",null,[[],["string",3]]],[5,"device_info","","Gets the information about device and platform as strings.",null,[[]]],[5,"init","","Initialize ArrayFire library",null,[[]]],[5,"device_count","","Get total number of available devices",null,[[]]],[5,"is_double_available","","Check if a device has double support",null,[[]]],[5,"set_device","","Set active device",null,[[]]],[5,"get_device","","Get the current active device id",null,[[]]],[5,"device_mem_info","","Get memory information from the memory manager for the…",null,[[]]],[5,"print_mem_info","","Print buffer details from the ArrayFire device manager",null,[[["string",3]]]],[5,"set_mem_step_size","","Set the minimum memory chunk size",null,[[]]],[5,"get_mem_step_size","","Get the minimum memory chunk size",null,[[]]],[5,"device_gc","","Call the garbage collection routine",null,[[]]],[5,"sync","","Sync all operations on given device",null,[[]]],[5,"alloc_pinned","","Allocate non-pageable memory on HOST memory",null,[[],["void_ptr",6]]],[5,"free_pinned","","Free the pointer returned by alloc_pinned",null,[[["void_ptr",6]]]],[5,"is_half_available","","Check if a device has half support",null,[[]]],[5,"handle_error_general","","Default error handling callback provided by ArrayFire crate",null,[[["aferror",4]]]],[5,"register_error_handler","","Register user provided error handler",null,[[["callback",3]]]],[5,"HANDLE_ERROR","","Default error handler for error code returned by ArrayFire…",null,[[["aferror",4]]]],[5,"get_last_error","","Fetch last error description as String",null,[[],["string",3]]],[5,"index","","Indexes the `input` Array using `seqs` Sequences",null,[[["array",3]],["array",3]]],[5,"row","","Extract `row_num` row from `input` Array",null,[[["array",3]],["array",3]]],[5,"set_row","","Set `row_num`^th row in `inout` Array to a new Array…",null,[[["array",3],["array",3]]]],[5,"rows","","Get an Array with all rows from `first` to `last` in the…",null,[[["array",3]],["array",3]]],[5,"set_rows","","Set rows from `first` to `last` in `inout` Array with rows…",null,[[["array",3],["array",3]]]],[5,"col","","Extract `col_num` col from `input` Array",null,[[["array",3]],["array",3]]],[5,"set_col","","Set `col_num`^th col in `inout` Array to a new Array…",null,[[["array",3],["array",3]]]],[5,"cols","","Get all cols from `first` to `last` in the `input` Array",null,[[["array",3]],["array",3]]],[5,"set_cols","","Set cols from `first` to `last` in `inout` Array with cols…",null,[[["array",3],["array",3]]]],[5,"slice","","Get `slice_num`^th slice from `input` Array",null,[[["array",3]],["array",3]]],[5,"set_slice","","Set slice `slice_num` in `inout` Array to a new Array…",null,[[["array",3],["array",3]]]],[5,"slices","","Get slices from `first` to `last` in `input` Array",null,[[["array",3]],["array",3]]],[5,"set_slices","","Set `first` to `last` slices of `inout` Array to a new…",null,[[["array",3],["array",3]]]],[5,"lookup","","Lookup(hash) an Array using another Array",null,[[["array",3],["array",3]],["array",3]]],[5,"assign_seq","","Assign(copy) content of an Array to another Array indexed…",null,[[["array",3],["array",3]]]],[5,"index_gen","","Index an Array using any combination of Array\'s and…",null,[[["array",3],["indexer",3]],["array",3]]],[5,"assign_gen","","Assign an Array to another after indexing it using any…",null,[[["indexer",3],["array",3],["array",3]]]],[5,"set_seed","","Set seed for random number generation",null,[[]]],[5,"get_seed","","Get the seed of random number generator",null,[[]]],[5,"randu","","Create random numbers from uniform distribution",null,[[["dim4",3]],["array",3]]],[5,"randn","","Create random numbers from normal distribution",null,[[["dim4",3]],["array",3]]],[5,"get_default_random_engine","","Get default random engine",null,[[],["randomengine",3]]],[5,"set_default_random_engine_type","","Set the random engine type for default random number…",null,[[["randomenginetype",4]]]],[5,"random_uniform","","Generate array of uniform numbers using a random engine",null,[[["randomengine",3],["dim4",3]],["array",3]]],[5,"random_normal","","Generate array of normal numbers using a random engine",null,[[["randomengine",3],["dim4",3]],["array",3]]],[5,"get_size","","Get size, in bytes, of the arrayfire native type",null,[[["dtype",4]]]],[5,"alloc_host","","Allocates space using Arrayfire allocator in host memory",null,[[["dtype",4]]]],[5,"free_host","","Frees memory allocated by Arrayfire allocator in host memory",null,[[]]],[5,"sum","","Sum elements along a given dimension",null,[[["array",3]],["array",3]]],[5,"product","","Compute product of elements along a given dimension",null,[[["array",3]],["array",3]]],[5,"min","","Find minimum among elements of given dimension",null,[[["array",3]],["array",3]]],[5,"max","","Find maximum among elements of given dimension",null,[[["array",3]],["array",3]]],[5,"all_true","","Find if all of the values along a given dimension in the…",null,[[["array",3]],["array",3]]],[5,"any_true","","Find if any of the values along a given dimension in the…",null,[[["array",3]],["array",3]]],[5,"count","","Count number of non-zero elements along a given dimension",null,[[["array",3]],["array",3]]],[5,"accum","","Perform exclusive sum of elements along a given dimension",null,[[["array",3]],["array",3]]],[5,"diff1","","Calculate first order numerical difference along a given…",null,[[["array",3]],["array",3]]],[5,"diff2","","Calculate second order numerical difference along a given…",null,[[["array",3]],["array",3]]],[5,"sum_nan","","Sum along specific dimension using user specified value…",null,[[["array",3]],["array",3]]],[5,"product_nan","","Product of elements along specific dimension using user…",null,[[["array",3]],["array",3]]],[5,"sum_all","","Sum all values of the Array",null,[[["array",3]]]],[5,"product_all","","Product of all values of the Array",null,[[["array",3]]]],[5,"min_all","","Find minimum among all values of the Array",null,[[["array",3]]]],[5,"max_all","","Find maximum among all values of the Array",null,[[["array",3]]]],[5,"all_true_all","","Find if all values of Array are non-zero",null,[[["array",3]]]],[5,"any_true_all","","Find if any value of Array is non-zero",null,[[["array",3]]]],[5,"count_all","","Count number of non-zero values in the Array",null,[[["array",3]]]],[5,"sum_nan_all","","Sum all values using user provided value for `NAN`",null,[[["array",3]]]],[5,"product_nan_all","","Product of all values using user provided value for `NAN`",null,[[["array",3]]]],[5,"imin","","Find minimum value along given dimension and their…",null,[[["array",3]]]],[5,"imax","","Find maximum value along given dimension and their…",null,[[["array",3]]]],[5,"imin_all","","Find minimum and it\'s index in the whole Array",null,[[["array",3]]]],[5,"imax_all","","Find maximum and it\'s index in the whole Array",null,[[["array",3]]]],[5,"locate","","Locate the indices of non-zero elements.",null,[[["array",3]],["array",3]]],[5,"sort","","Sort the values in input Arrays",null,[[["array",3]],["array",3]]],[5,"sort_index","","Sort the values in input Arrays",null,[[["array",3]]]],[5,"sort_by_key","","Sort the values in input Arrays",null,[[["array",3],["array",3]]]],[5,"set_unique","","Find unique values from a Set",null,[[["array",3]],["array",3]]],[5,"set_union","","Find union of two sets",null,[[["array",3]],["array",3]]],[5,"set_intersect","","Find intersection of two sets",null,[[["array",3]],["array",3]]],[5,"scan","","Generalized scan",null,[[["binaryop",4],["array",3]],["array",3]]],[5,"scan_by_key","","Generalized scan by key",null,[[["binaryop",4],["array",3],["array",3]],["array",3]]],[5,"all_true_by_key","","Key based AND of elements along a given dimension",null,[[["array",3],["array",3]]]],[5,"any_true_by_key","","Key based OR of elements along a given dimension",null,[[["array",3],["array",3]]]],[5,"count_by_key","","Find total count of elements with similar keys along a…",null,[[["array",3],["array",3]]]],[5,"max_by_key","","Find maximum among values of similar keys along a given…",null,[[["array",3],["array",3]]]],[5,"min_by_key","","Find minimum among values of similar keys along a given…",null,[[["array",3],["array",3]]]],[5,"product_by_key","","Find product of all values with similar keys along a given…",null,[[["array",3],["array",3]]]],[5,"sum_by_key","","Find sum of all values with similar keys along a given…",null,[[["array",3],["array",3]]]],[5,"sum_by_key_nan","","Compute sum of all values with similar keys along a given…",null,[[["array",3],["array",3]]]],[5,"product_by_key_nan","","Compute product of all values with similar keys along a…",null,[[["array",3],["array",3]]]],[5,"gemm","","BLAS general matrix multiply (GEMM) of two Array objects",null,[[["array",3],["vec",3],["array",3],["matprop",4]]]],[5,"matmul","","Matrix multiple of two Arrays",null,[[["array",3],["matprop",4]],["array",3]]],[5,"dot","","Calculate the dot product of vectors.",null,[[["array",3],["matprop",4]],["array",3]]],[5,"transpose","","Transpose of a matrix.",null,[[["array",3]],[["array",3],["hasafenum",8]]]],[5,"transpose_inplace","","Inplace transpose of a matrix.",null,[[["array",3]]]],[5,"set_cublas_mode","","Sets the cuBLAS math mode for the internal handle.",null,[[["cublasmathmode",4]]]],[5,"gradient","","Calculate the gradients",null,[[["array",3]]]],[5,"load_image","","Load Image into Array",null,[[["string",3]],["array",3]]],[5,"load_image_native","","Load Image into Array in it\'s native type",null,[[["string",3]],["array",3]]],[5,"save_image","","Save an Array to an image file",null,[[["string",3],["array",3]]]],[5,"save_image_native","","Save an Array without modifications to an image file",null,[[["string",3],["array",3]]]],[5,"resize","","Resize an Image",null,[[["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"transform","","Transform(Affine) an Image",null,[[["array",3],["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"rotate","","Rotate an Image",null,[[["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"translate","","Translate an Image",null,[[["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"scale","","Scale an Image",null,[[["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"skew","","Skew an image",null,[[["array",3],["interptype",4]],[["array",3],["hasafenum",8]]]],[5,"histogram","","Compute Histogram of an Array",null,[[["array",3]],["array",3]]],[5,"dilate","","Dilate an Image",null,[[["array",3]],["array",3]]],[5,"erode","","Erode an Image",null,[[["array",3]],["array",3]]],[5,"dilate3","","Dilate a Volume",null,[[["array",3]],["array",3]]],[5,"erode3","","Erode a Volume",null,[[["array",3]],["array",3]]],[5,"bilateral","","Bilateral Filter.",null,[[["array",3]],["array",3]]],[5,"mean_shift","","Meanshift Filter.",null,[[["array",3]],["array",3]]],[5,"medfilt","","Median filter",null,[[["array",3],["bordertype",4]],["array",3]]],[5,"minfilt","","Box filter with minimum as box operation",null,[[["array",3],["bordertype",4]],["array",3]]],[5,"maxfilt","","Box filter with maximum as box operation",null,[[["array",3],["bordertype",4]],["array",3]]],[5,"gaussian_kernel","","Creates a Gaussian Kernel.",null,[[],["array",3]]],[5,"color_space","","Color space conversion",null,[[["array",3],["colorspace",4]],["array",3]]],[5,"regions","","Find blobs in given image.",null,[[["connectivity",4],["array",3]],["array",3]]],[5,"sobel","","Sobel Operator",null,[[["array",3]]]],[5,"hist_equal","","Histogram Equalization",null,[[["array",3],["array",3]],["array",3]]],[5,"rgb2gray","","Color(RGB) to Grayscale conversion",null,[[["array",3]],["array",3]]],[5,"gray2rgb","","Grayscale to Color(RGB) conversion",null,[[["array",3]],["array",3]]],[5,"hsv2rgb","","HSV to RGB color space conversion",null,[[["array",3]],["array",3]]],[5,"rgb2hsv","","RGB to HSV color space conversion",null,[[["array",3]],["array",3]]],[5,"unwrap","","Generate an array with image windows as columns",null,[[["array",3]],[["array",3],["hasafenum",8]]]],[5,"wrap","","Converts unwrapped image to an image",null,[[["array",3]],[["array",3],["hasafenum",8]]]],[5,"sat","","Summed area table of an Image",null,[[["array",3]],["array",3]]],[5,"rgb2ycbcr","","RGB to YCbCr colorspace converter.",null,[[["array",3],["yccstd",4]],["array",3]]],[5,"ycbcr2rgb","","YCbCr to RGB colorspace converter.",null,[[["array",3],["yccstd",4]],["array",3]]],[5,"is_imageio_available","","Function to check if Image I/O is available",null,[[]]],[5,"transform_coords","","Transform input coordinates",null,[[["array",3]],["array",3]]],[5,"moments","","Find Image moments",null,[[["momenttype",4],["array",3]],["array",3]]],[5,"moments_all","","Find Image moment for whole image",null,[[["momenttype",4],["array",3]]]],[5,"medfilt1","","One dimensional median filter on image",null,[[["array",3],["bordertype",4]],["array",3]]],[5,"canny","","Canny edge detection operator",null,[[["cannythresholdtype",4],["array",3]],["array",3]]],[5,"anisotropic_diffusion","","Anisotropic smoothing filter",null,[[["fluxfn",4],["array",3],["diffusioneq",4]],["array",3]]],[5,"confidence_cc","","Segment image based on similar pixel characteristics",null,[[["array",3],["array",3]],["array",3]]],[5,"iterative_deconv","","Iterative Deconvolution",null,[[["array",3],["array",3],["iterativedeconvalgo",4]],["array",3]]],[5,"inverse_deconv","","Inverse deconvolution",null,[[["array",3],["array",3],["inversedeconvalgo",4]],["array",3]]],[5,"svd","","Perform Singular Value Decomposition",null,[[["array",3]]]],[5,"svd_inplace","","Perform Singular Value Decomposition inplace",null,[[["array",3]]]],[5,"lu","","Perform LU decomposition",null,[[["array",3]]]],[5,"lu_inplace","","Perform inplace LU decomposition",null,[[["array",3]],["array",3]]],[5,"qr","","Perform QR decomposition",null,[[["array",3]]]],[5,"qr_inplace","","Perform inplace QR decomposition",null,[[["array",3]],["array",3]]],[5,"cholesky","","Perform Cholesky decomposition",null,[[["array",3]]]],[5,"cholesky_inplace","","Perform inplace Cholesky decomposition",null,[[["array",3]]]],[5,"solve","","Solve a system of equations",null,[[["array",3],["matprop",4]],["array",3]]],[5,"solve_lu","","Solve a system of equations",null,[[["array",3],["array",3],["matprop",4]],["array",3]]],[5,"inverse","","Compute inverse of a matrix",null,[[["array",3],["matprop",4]],["array",3]]],[5,"rank","","Find rank of a matrix",null,[[["array",3]]]],[5,"det","","Find the determinant of the matrix",null,[[["array",3]]]],[5,"norm","","Find the norm of a matrix",null,[[["array",3],["normtype",4]]]],[5,"is_lapack_available","","Function to check if lapack support is available",null,[[]]],[5,"pinverse","","Psuedo Inverse of Matrix",null,[[["array",3],["matprop",4]],["array",3]]],[5,"convolve2_nn","","Convolution Integral for two dimensional data",null,[[["array",3],["dim4",3]],["array",3]]],[5,"convolve2_gradient_nn","","Backward pass gradient of 2D convolution",null,[[["convgradienttype",4],["array",3],["dim4",3]],["array",3]]],[5,"approx1","","Perform signal interpolation for 1d signals",null,[[["array",3],["array",3],["interptype",4]],["array",3]]],[5,"approx1_v2","","Same as approx1 but uses existing Array as output",null,[[["interptype",4],["array",3],["array",3],["array",3]]]],[5,"approx1_uniform","","Perform signal interpolation for 1d signals along…",null,[[["array",3],["array",3],["interptype",4]],["array",3]]],[5,"approx1_uniform_v2","","Same as approx1_uniform but uses existing Array as output",null,[[["interptype",4],["array",3],["array",3],["array",3]]]],[5,"approx2","","Perform signal interpolation for 2d signals",null,[[["array",3],["array",3],["interptype",4]],["array",3]]],[5,"approx2_v2","","Same as approx2 but uses existing Array as output",null,[[["interptype",4],["array",3],["array",3],["array",3]]]],[5,"approx2_uniform","","Perform signal interpolation for 2d signals along a…",null,[[["array",3],["array",3],["interptype",4]],["array",3]]],[5,"approx2_uniform_v2","","Same as approx2_uniform but uses existing Array as output",null,[[["interptype",4],["array",3],["array",3],["array",3]]]],[5,"set_fft_plan_cache_size","","Set fft plan cache size",null,[[]]],[5,"fft","","Fast fourier transform for 1d signals",null,[[["array",3]],["array",3]]],[5,"fft2","","Fast fourier transform for 2d signals",null,[[["array",3]],["array",3]]],[5,"fft3","","Fast fourier transform for 3d signals",null,[[["array",3]],["array",3]]],[5,"ifft","","Inverse fast fourier transform for 1d signals",null,[[["array",3]],["array",3]]],[5,"ifft2","","Inverse fast fourier transform for 2d signals",null,[[["array",3]],["array",3]]],[5,"ifft3","","Inverse fast fourier transform for 3d signals",null,[[["array",3]],["array",3]]],[5,"convolve1","","1d convolution",null,[[["array",3],["convdomain",4],["array",3],["convmode",4]],["array",3]]],[5,"convolve2","","2d convolution",null,[[["array",3],["convdomain",4],["array",3],["convmode",4]],["array",3]]],[5,"convolve3","","3d convolution",null,[[["array",3],["convdomain",4],["array",3],["convmode",4]],["array",3]]],[5,"convolve2_sep","","Separable convolution for 2d signals",null,[[["array",3],["array",3],["convmode",4]],["array",3]]],[5,"fft_convolve1","","1d convolution using fast-fourier transform",null,[[["array",3],["array",3],["convmode",4]],["array",3]]],[5,"fft_convolve2","","2d convolution using fast-fourier transform",null,[[["array",3],["array",3],["convmode",4]],["array",3]]],[5,"fft_convolve3","","3d convolution using fast-fourier transform",null,[[["array",3],["array",3],["convmode",4]],["array",3]]],[5,"fir","","Finite impulse filter",null,[[["array",3],["array",3]],["array",3]]],[5,"iir","","Infinite impulse response filter",null,[[["array",3]],[["array",3],["hasafenum",8]]]],[5,"fft_inplace","","In place 1d dimensional Fast fourier transform",null,[[["array",3]]]],[5,"fft2_inplace","","In place 2d dimensional Fast fourier transform",null,[[["array",3]]]],[5,"fft3_inplace","","In place 3d dimensional Fast fourier transform",null,[[["array",3]]]],[5,"ifft_inplace","","In place 1d dimensional inverse fast fourier transform",null,[[["array",3]]]],[5,"ifft2_inplace","","In place 2d dimensional inverse fast fourier transform",null,[[["array",3]]]],[5,"ifft3_inplace","","In place 3d dimensional inverse fast fourier transform",null,[[["array",3]]]],[5,"fft_r2c","","1d Real to Complex fast fourier transform",null,[[["array",3]],[["array",3],["complex",3]]]],[5,"fft2_r2c","","2d Real to Complex fast fourier transform",null,[[["array",3]],[["array",3],["complex",3]]]],[5,"fft3_r2c","","3d Real to Complex fast fourier transform",null,[[["array",3]],[["array",3],["complex",3]]]],[5,"fft_c2r","","1d Complex to Real fast fourier transform",null,[[["array",3]],["array",3]]],[5,"fft2_c2r","","2d Complex to Real fast fourier transform",null,[[["array",3]],["array",3]]],[5,"fft3_c2r","","3d Complex to Real fast fourier transform",null,[[["array",3]],["array",3]]],[5,"sparse","","Create sprase matrix from arrays",null,[[["array",3],["array",3],["sparseformat",4]],["array",3]]],[5,"sparse_from_host","","Create sprase matrix from data on host memory",null,[[["sparseformat",4]],["array",3]]],[5,"sparse_from_dense","","Convert dense array to sparse array",null,[[["array",3],["sparseformat",4]],["array",3]]],[5,"sparse_convert_to","","Convert between sparse formats",null,[[["array",3],["sparseformat",4]],["array",3]]],[5,"sparse_to_dense","","Convert sparse array to dense array",null,[[["array",3]],["array",3]]],[5,"sparse_get_info","","Get sparse Array information",null,[[["array",3]]]],[5,"sparse_get_values","","Get values of sparse Array",null,[[["array",3]],["array",3]]],[5,"sparse_get_row_indices","","Get row indices Array",null,[[["array",3]],["array",3]]],[5,"sparse_get_col_indices","","Get cololumn indices Array",null,[[["array",3]],["array",3]]],[5,"sparse_get_nnz","","Get number of non-zero elements in sparse array",null,[[["array",3]]]],[5,"sparse_get_format","","Get sparse format",null,[[["array",3]],["sparseformat",4]]],[5,"median","","Find the median along a given dimension",null,[[["array",3]],["array",3]]],[5,"mean","","Mean along specified dimension",null,[[["array",3]],["array",3]]],[5,"stdev","","Standard deviation along specified dimension",null,[[["array",3]],["array",3]]],[5,"mean_weighted","","Weighted mean along specified dimension",null,[[["array",3],["array",3]],["array",3]]],[5,"var_weighted","","Weight variance along specified dimension",null,[[["array",3],["array",3]],["array",3]]],[5,"var","","Compute Variance along a specific dimension",null,[[["array",3]],["array",3]]],[5,"cov","","Compute covariance of two Arrays",null,[[["array",3]],["array",3]]],[5,"var_all","","Compute Variance of all elements",null,[[["array",3]]]],[5,"mean_all","","Compute mean of all data",null,[[["array",3]]]],[5,"stdev_all","","Compute standard deviation of all data",null,[[["array",3]]]],[5,"median_all","","Compute median of all data",null,[[["array",3]]]],[5,"mean_all_weighted","","Compute weighted mean of all data",null,[[["array",3],["array",3]]]],[5,"var_all_weighted","","Compute weighted variance of all data",null,[[["array",3],["array",3]]]],[5,"corrcoef","","Compute correlation coefficient",null,[[["array",3]]]],[5,"topk","","Find top k elements along a given dimension",null,[[["array",3],["topkfn",4]]]],[5,"meanvar","","Calculate mean and variance in single API call",null,[[["array",3],["array",3],["variancebias",4]]]],[5,"fast","","Fast feature detector",null,[[["array",3]],["features",3]]],[5,"harris","","Harris corner detector.",null,[[["array",3]],["features",3]]],[5,"orb","","ORB feature descriptor",null,[[["array",3]]]],[5,"hamming_matcher","","Hamming feature matcher",null,[[["array",3]]]],[5,"nearest_neighbour","","Nearest Neighbour.",null,[[["array",3],["matchtype",4]]]],[5,"match_template","","Image matching",null,[[["array",3],["matchtype",4]],["array",3]]],[5,"susan","","SUSAN corner detector.",null,[[["array",3]],["features",3]]],[5,"dog","","Difference of Gaussians.",null,[[["array",3]],["array",3]]],[5,"homography","","Homography estimation",null,[[["array",3],["homographytype",4]]]],[11,"new","","Constructs a new Array object",30,[[["dim4",3]]]],[11,"new_strided","","Constructs a new Array object from strided data",30,[[["dim4",3]]]],[11,"new_empty","","Constructs a new Array object of specified dimensions and…",30,[[["dim4",3]]]],[11,"new_from_device_ptr","","Constructs a new Array object from device pointer",30,[[["dim4",3]]]],[11,"get_backend","","Returns the backend of the Array",30,[[],["backend",4]]],[11,"get_device_id","","Returns the device identifier(integer) on which the Array…",30,[[]]],[11,"elements","","Returns the number of elements in the Array",30,[[]]],[11,"get_type","","Returns the Array data type",30,[[],["dtype",4]]],[11,"dims","","Returns the dimensions of the Array",30,[[],["dim4",3]]],[11,"strides","","Returns the strides of the Array",30,[[],["dim4",3]]],[11,"numdims","","Returns the number of dimensions of the Array",30,[[]]],[11,"offset","","Returns the offset to the pointer from where data begins",30,[[]]],[11,"get","","Returns the native FFI handle for Rust object `Array`",30,[[],["af_array",6]]],[11,"set","","Set the native FFI handle for Rust object `Array`",30,[[["af_array",6]]]],[11,"host","","Copies the data from the Array to the mutable slice `data`",30,[[]]],[11,"eval","","Evaluates any pending lazy expressions that represent the…",30,[[]]],[11,"copy","","Makes an copy of the Array",30,[[]]],[11,"is_empty","","Check if Array is empty",30,[[]]],[11,"is_scalar","","Check if Array is scalar",30,[[]]],[11,"is_row","","Check if Array is a row",30,[[]]],[11,"is_column","","Check if Array is a column",30,[[]]],[11,"is_vector","","Check if Array is a vector",30,[[]]],[11,"is_real","","Check if Array is of real (not complex) type",30,[[]]],[11,"is_complex","","Check if Array is of complex type",30,[[]]],[11,"is_double","","Check if Array\'s numerical type is of double precision",30,[[]]],[11,"is_single","","Check if Array\'s numerical type is of single precision",30,[[]]],[11,"is_half","","Check if Array\'s numerical type is of half precision",30,[[]]],[11,"is_integer","","Check if Array is of integral type",30,[[]]],[11,"is_bool","","Check if Array is of boolean type",30,[[]]],[11,"is_realfloating","","Check if Array is floating point real(not complex) data type",30,[[]]],[11,"is_floating","","Check if Array is floating point type, either real or…",30,[[]]],[11,"is_linear","","Check if Array\'s memory layout is continuous and one…",30,[[]]],[11,"is_sparse","","Check if Array is a sparse matrix",30,[[]]],[11,"is_owner","","Check if Array\'s memory is owned by it and not a view of…",30,[[]]],[11,"cast","","Cast the Array data type to `target_type`",30,[[],[["array",3],["hasafenum",8]]]],[11,"lock","","Lock the device buffer in the memory manager",30,[[]]],[11,"unlock","","Unlock the device buffer in the memory manager",30,[[]]],[11,"device_ptr","","Get the device pointer and lock the buffer in memory manager",30,[[],["void_ptr",6]]],[11,"get_allocated_bytes","","Get the size of physical allocated bytes.",30,[[]]],[11,"new","","Create Dim4 object",31,[[]]],[11,"elements","","Get the number of elements represented by Dim4 object",31,[[]]],[11,"ndims","","Get the number of dimensions of Dim4",31,[[]]],[11,"get","","Get the dimensions as a slice of 4 values",31,[[]]],[11,"new","","Associated function to create a new Callback object",32,[[["errorcallback",6]]]],[11,"call","","call invokes the error callback with `error_code`.",32,[[["aferror",4]]]],[11,"mark","","Marks the event on the active computation queue.",33,[[]]],[11,"enqueue_wait","","Enqueues the event and all enqueued events on the active…",33,[[]]],[11,"block","","Blocks the calling thread on events until all events on…",33,[[]]],[11,"new","","Create a new Indexer object and set the dimension specific…",34,[[]]],[11,"set_index","","Set either Array or Seq to index an Array along `idx`…",34,[[["option",4]]]],[11,"len","","Get number of indexing objects set",34,[[]]],[11,"is_empty","","Check if any indexing objects are set",34,[[]]],[11,"get","","Get native(ArrayFire) resource handle",34,[[],["af_index_t",6]]],[11,"new","","Create a new random engine object",35,[[["randomenginetype",4],["option",4]]]],[11,"get_type","","Get random engine type",35,[[],["randomenginetype",4]]],[11,"set_type","","Get random engine type",35,[[["randomenginetype",4]]]],[11,"set_seed","","Set seed for random engine",35,[[]]],[11,"get_seed","","Get seed of the random engine",35,[[]]],[11,"get","","Returns the native FFI handle for Rust object `RandomEngine`",35,[[],["af_random_engine",6]]],[11,"new","","Create a `Seq` that goes from `begin` to `end` at a step…",36,[[]]],[11,"begin","","Get begin index of Seq",36,[[]]],[11,"end","","Get end index of Seq",36,[[]]],[11,"step","","Get step size of Seq",36,[[]]],[11,"new","","Creates new Window object",37,[[["string",3]]]],[11,"set_position","","Set window starting position on the screen",37,[[]]],[11,"set_title","","Set window title",37,[[["string",3]]]],[11,"set_visibility","","Set window visibility",37,[[]]],[11,"set_size","","Set window size",37,[[]]],[11,"set_colormap","","Set color map to be used for rendering image, it can take…",37,[[["colormap",4]]]],[11,"is_closed","","Returns true if the window close is triggered by the user",37,[[]]],[11,"grid","","Setup display layout in multiview mode",37,[[]]],[11,"show","","Used in multiview mode to swap back buffer with front…",37,[[]]],[11,"set_view","","Set the current sub-region to render",37,[[]]],[11,"set_axes_titles","","Set chart axes titles",37,[[["string",3]]]],[11,"set_axes_label_format","","Set chart axes labels format",37,[[["string",3]]]],[11,"set_axes_label_formats","","Set chart axes labels formats",37,[[["string",3]]]],[11,"set_axes_limits_compute","","Set chart axes limits by computing limits from data",37,[[["array",3],["option",4]]]],[11,"set_axes_limits_2d","","Set 2d chart axes limits",37,[[]]],[11,"set_axes_limits_3d","","Set 3d chart axes limits",37,[[]]],[11,"draw_image","","Render given Array as an image",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_plot2","","Render given two Array\'s `x` and `y` as a 2d line plot",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_plot3","","Render given Array\'s `x`, `y` and `z` as a 3d line plot",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_plot","","Render give Arrays of points as a 3d line plot",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_hist","","Render given Array as a histogram",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_surface","","Render give Arrays as 3d surface",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_scatter2","","Render given Arrays as 2d scatter plot",37,[[["option",4],["array",3],["markertype",4],["string",3]]]],[11,"draw_scatter3","","Render given Arrays as 3d scatter plot",37,[[["option",4],["array",3],["markertype",4],["string",3]]]],[11,"draw_scatter","","Render give Array as 3d scatter plot",37,[[["option",4],["array",3],["markertype",4],["string",3]]]],[11,"draw_vector_field2","","Render given Arrays as 2d vector field",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_vector_field3","","Render given Arrays as 3d vector field",37,[[["array",3],["string",3],["option",4]]]],[11,"draw_vector_field","","Render given Array as vector field",37,[[["array",3],["string",3],["option",4]]]],[11,"new","","Create and return an object of type Features",38,[[]]],[11,"num_features","","Get total number of features found",38,[[]]],[11,"xpos","","Get x coordinates Array",38,[[],["array",3]]],[11,"ypos","","Get y coordinates Array",38,[[],["array",3]]],[11,"score","","Get score Array",38,[[],["array",3]]],[11,"orientation","","Get orientation Array",38,[[],["array",3]]],[11,"size","","Get features size Array",38,[[],["array",3]]],[11,"get","","Get the internal handle for Features object",38,[[],["af_features",6]]],[6,"ErrorCallback","","Signature of error handling callback function",null,null],[6,"c32","","Short type alias for Complex single precision type",null,null],[6,"c64","","Short type alias for Complex double precision type",null,null],[6,"dim_t","","ArrayFire FFI Type alias for libc\'s signed long long",null,null],[6,"u64_t","","ArrayFire FFI Type alias for libc\'s unsigned long long",null,null],[6,"void_ptr","","ArrayFire FFI Type alias for libc\'s void*",null,null],[6,"af_array","","ArrayFire FFI Type alias for af_array",null,null],[6,"af_event","","ArrayFire FFI Type alias for af_event",null,null],[6,"af_index_t","","ArrayFire FFI Type alias for af_indexers_t",null,null],[6,"af_features","","ArrayFire FFI Type alias for af_features",null,null],[6,"af_random_engine","","ArrayFire FFI Type alias for af_random_engine",null,null],[6,"af_window","","ArrayFire FFI Type alias for af_window",null,null],[17,"PHILOX","","Default Philon RandomEngine that points to PHILOX_4X32_10",null,null],[17,"THREEFRY","","Default Threefry RandomEngine that points to…",null,null],[17,"MERSENNE","","Default Mersenne RandomEngine that points to…",null,null],[17,"DEFAULT_RANDOM_ENGINE","","Default RandomEngine that defaults to PHILOX",null,null],[8,"Convertable","","Type Trait to convert to an Array",null,null],[16,"OutType","","This type alias always points to `Self` which is the type…",39,null],[10,"convert","","Get an Array of implementors type",39,[[],["array",3]]],[8,"ConstGenerator","","Type Trait to generate a constant Array of given size",null,null],[16,"OutType","","The type of Array object returned by generate function",40,null],[10,"generate","","Create an Array of `dims` size from scalar value `self`.",40,[[["dim4",3]],["array",3]]],[8,"Indexable","","Trait bound indicating indexability",null,null],[10,"set","","Set indexing object for a given dimension",41,[[["option",4],["indexer",3]]]],[8,"HasAfEnum","","Types of the data that can be generated using ArrayFire…",null,null],[16,"InType","","This type alias points to `Self` always.",42,null],[16,"BaseType","","This type alias points to the data type used to hold real…",42,null],[16,"AbsOutType","","This type alias points to `f32` for all 32 bit size types…",42,null],[16,"ArgOutType","","This type alias points to `f64`/`f32` for floating point…",42,null],[16,"UnaryOutType","","This type alias is used to define the output Array type…",42,null],[16,"ComplexOutType","","This type alias points to complex type created from a…",42,null],[16,"MeanOutType","","This type alias points to a data type that can store the…",42,null],[16,"AggregateOutType","","This type alias points to a data type that can store the…",42,null],[16,"ProductOutType","","This type is different for b8 input type",42,null],[16,"SobelOutType","","This type alias points to the output type for given input…",42,null],[10,"get_af_dtype","","Return trait implmentors corresponding DType",42,[[],["dtype",4]]],[8,"ImplicitPromote","","This is an internal trait defined and implemented by…",null,null],[16,"Output","","This type alias points to the type of the result obtained…",43,null],[8,"FloatingPoint","","Trait qualifier to accept either real or complex typed data",null,null],[11,"is_real","","Use to check if trait implementor is real number",44,[[]]],[11,"is_complex","","Use to check if trait implementor is complex number",44,[[]]],[8,"RealFloating","","Trait qualifier to accept real data(numbers)",null,null],[8,"ComplexFloating","","Trait qualifier to accept complex data(numbers)",null,null],[8,"RealNumber","","Trait qualifier indicating it can hold real numbers only",null,null],[8,"Scanable","","Trait qualifier for the type of Arrays accepted by scan…",null,null],[8,"ImageNativeType","","Trait qualifier for type of Array\'s that are accepted by…",null,null],[8,"ImageFilterType","","Trait qualifier for type of Array\'s that are accepted by…",null,null],[8,"GrayRGBConvertible","","Trait qualifier for given type indicating conversion…",null,null],[8,"MomentsComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"MedianComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"EdgeComputable","","Trait qualifier for given type indicating if edge…",null,null],[8,"CovarianceComputable","","Trait qualifier for given type indicating computability of…",null,null],[8,"ConfidenceCCInput","","Trait qualifier for confidence connected components input",null,null],[8,"DeconvInput","","Trait qualifier for confidence connected components input",null,null],[8,"ReduceByKeyInput","","Trait qualifier for Reduction Key type",null,null],[8,"Fromf64","","Trait to convert reduction\'s scalar output to appropriate…",null,null],[10,"fromf64","","Convert to target type from a double precision value",45,[[]]],[14,"mem_info","","Macro to print the current stats of ArrayFire\'s memory…",null,null],[14,"join_many","","Join multiple Arrays along a given dimension",null,null],[14,"af_print","","Print given message before printing out the Array to…",null,null],[14,"dim4","","Create a dim4 object from provided dimensions",null,null],[14,"seq","","Create a sequence object",null,null],[14,"view","","Indexing into an existing Array",null,null],[14,"eval","","Macro to evaluate individual Arrays or assignment operations",null,null],[14,"constant","","Create an array of given shape filled with a single value…",null,null],[14,"randu","","Create an array of given shape sampled from uniform…",null,null],[14,"randn","","Create an array of given shape sampled from normal…",null,null],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"to_string","","",36,[[],["string",3]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"convert","","",30,[[],["array",3]]],[11,"generate","","",46,[[["dim4",3]],["array",3]]],[11,"generate","","",47,[[["dim4",3]],["array",3]]],[11,"set","","",30,[[["option",4],["indexer",3]]]],[11,"set","","",36,[[["option",4],["indexer",3]]]],[11,"drop","","",30,[[]]],[11,"drop","","",33,[[]]],[11,"drop","","",34,[[]]],[11,"drop","","",35,[[]]],[11,"drop","","",37,[[]]],[11,"drop","","",38,[[]]],[11,"from","","",35,[[["af_random_engine",6]]]],[11,"from","","",0,[[]]],[11,"from","","",2,[[]]],[11,"from","","",3,[[]]],[11,"from","","",6,[[]]],[11,"from","","",7,[[]]],[11,"from","","",8,[[]]],[11,"from","","",12,[[]]],[11,"from","","",17,[[]]],[11,"from","","",18,[[]]],[11,"from","","",19,[[]]],[11,"from","","",10,[[]]],[11,"into","","",48,[[],["array",3]]],[11,"clone","","",30,[[]]],[11,"clone","","",0,[[],["aferror",4]]],[11,"clone","","",1,[[],["backend",4]]],[11,"clone","","",2,[[],["dtype",4]]],[11,"clone","","",3,[[],["interptype",4]]],[11,"clone","","",4,[[],["bordertype",4]]],[11,"clone","","",5,[[],["connectivity",4]]],[11,"clone","","",6,[[],["convmode",4]]],[11,"clone","","",7,[[],["convdomain",4]]],[11,"clone","","",8,[[],["matchtype",4]]],[11,"clone","","",9,[[],["colorspace",4]]],[11,"clone","","",10,[[],["matprop",4]]],[11,"clone","","",11,[[],["normtype",4]]],[11,"clone","","",12,[[],["colormap",4]]],[11,"clone","","",13,[[],["yccstd",4]]],[11,"clone","","",14,[[],["homographytype",4]]],[11,"clone","","",15,[[],["markertype",4]]],[11,"clone","","",16,[[],["momenttype",4]]],[11,"clone","","",17,[[],["sparseformat",4]]],[11,"clone","","",18,[[],["binaryop",4]]],[11,"clone","","",19,[[],["randomenginetype",4]]],[11,"clone","","",20,[[],["scalar",4]]],[11,"clone","","",21,[[],["cannythresholdtype",4]]],[11,"clone","","",22,[[],["diffusioneq",4]]],[11,"clone","","",23,[[],["fluxfn",4]]],[11,"clone","","",24,[[],["topkfn",4]]],[11,"clone","","",25,[[],["iterativedeconvalgo",4]]],[11,"clone","","",26,[[],["inversedeconvalgo",4]]],[11,"clone","","",27,[[],["convgradienttype",4]]],[11,"clone","","",28,[[],["variancebias",4]]],[11,"clone","","",29,[[],["cublasmathmode",4]]],[11,"clone","","",31,[[],["dim4",3]]],[11,"clone","","",35,[[]]],[11,"clone","","",36,[[],["seq",3]]],[11,"clone","","",37,[[],["window",3]]],[11,"clone","","",38,[[]]],[11,"default","","",31,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",36,[[]]],[11,"eq","","",0,[[["aferror",4]]]],[11,"eq","","",1,[[["backend",4]]]],[11,"eq","","",2,[[["dtype",4]]]],[11,"eq","","",3,[[["interptype",4]]]],[11,"eq","","",4,[[["bordertype",4]]]],[11,"eq","","",5,[[["connectivity",4]]]],[11,"eq","","",6,[[["convmode",4]]]],[11,"eq","","",7,[[["convdomain",4]]]],[11,"eq","","",8,[[["matchtype",4]]]],[11,"eq","","",9,[[["colorspace",4]]]],[11,"eq","","",10,[[["matprop",4]]]],[11,"eq","","",11,[[["normtype",4]]]],[11,"eq","","",12,[[["colormap",4]]]],[11,"eq","","",13,[[["yccstd",4]]]],[11,"eq","","",14,[[["homographytype",4]]]],[11,"eq","","",15,[[["markertype",4]]]],[11,"eq","","",16,[[["momenttype",4]]]],[11,"eq","","",17,[[["sparseformat",4]]]],[11,"eq","","",18,[[["binaryop",4]]]],[11,"eq","","",19,[[["randomenginetype",4]]]],[11,"eq","","",20,[[["scalar",4]]]],[11,"ne","","",20,[[["scalar",4]]]],[11,"eq","","",21,[[["cannythresholdtype",4]]]],[11,"eq","","",22,[[["diffusioneq",4]]]],[11,"eq","","",23,[[["fluxfn",4]]]],[11,"eq","","",24,[[["topkfn",4]]]],[11,"eq","","",25,[[["iterativedeconvalgo",4]]]],[11,"eq","","",26,[[["inversedeconvalgo",4]]]],[11,"eq","","",27,[[["convgradienttype",4]]]],[11,"eq","","",28,[[["variancebias",4]]]],[11,"eq","","",29,[[["cublasmathmode",4]]]],[11,"eq","","",31,[[["dim4",3]]]],[11,"ne","","",31,[[["dim4",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["fmterror",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["fmterror",3]]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"div","","",30,[[["complex",3]]]],[11,"div","","",30,[[["complex",3]]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[]]],[11,"div","","",30,[[["array",3]]]],[11,"div","","",30,[[["array",3]]]],[11,"rem","","",30,[[["array",3]]]],[11,"rem","","",30,[[["array",3]]]],[11,"sub","","",30,[[["complex",3]]]],[11,"sub","","",30,[[["complex",3]]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",30,[[["array",3]]]],[11,"sub","","",30,[[["array",3]]]],[11,"add","","",30,[[["complex",3]]]],[11,"add","","",30,[[["complex",3]]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[]]],[11,"add","","",30,[[["array",3]]]],[11,"add","","",30,[[["array",3]]]],[11,"mul","","",30,[[["complex",3]]]],[11,"mul","","",30,[[["complex",3]]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",30,[[["array",3]]]],[11,"mul","","",30,[[["array",3]]]],[11,"neg","","",30,[[]]],[11,"add_assign","","",30,[[["array",3]]]],[11,"sub_assign","","",30,[[["array",3]]]],[11,"mul_assign","","",30,[[["array",3]]]],[11,"div_assign","","",30,[[["array",3]]]],[11,"rem_assign","","",30,[[["array",3]]]],[11,"bitand","","",30,[[["array",3]]]],[11,"bitand","","",30,[[["array",3]]]],[11,"bitor","","",30,[[["array",3]]]],[11,"bitor","","",30,[[["array",3]]]],[11,"bitor","","",10,[[]]],[11,"bitxor","","",30,[[["array",3]]]],[11,"bitxor","","",30,[[["array",3]]]],[11,"shl","","",30,[[["array",3]]]],[11,"shl","","",30,[[["array",3]]]],[11,"shl","","",30,[[]]],[11,"shl","","",30,[[]]],[11,"shl","","",30,[[]]],[11,"shl","","",30,[[]]],[11,"shr","","",30,[[["array",3]]]],[11,"shr","","",30,[[["array",3]]]],[11,"shr","","",30,[[]]],[11,"shr","","",30,[[]]],[11,"shr","","",30,[[]]],[11,"shr","","",30,[[]]],[11,"bitand_assign","","",30,[[["array",3]]]],[11,"bitor_assign","","",30,[[["array",3]]]],[11,"bitxor_assign","","",30,[[["array",3]]]],[11,"shl_assign","","",30,[[["array",3]]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shr_assign","","",30,[[["array",3]]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",30,[[]]],[11,"index","","",31,[[]]],[11,"index_mut","","",31,[[]]],[11,"is_real","","Use to check if trait implementor is real number",44,[[]]],[11,"is_complex","","Use to check if trait implementor is complex number",44,[[]]]],"p":[[4,"AfError"],[4,"Backend"],[4,"DType"],[4,"InterpType"],[4,"BorderType"],[4,"Connectivity"],[4,"ConvMode"],[4,"ConvDomain"],[4,"MatchType"],[4,"ColorSpace"],[4,"MatProp"],[4,"NormType"],[4,"ColorMap"],[4,"YCCStd"],[4,"HomographyType"],[4,"MarkerType"],[4,"MomentType"],[4,"SparseFormat"],[4,"BinaryOp"],[4,"RandomEngineType"],[4,"Scalar"],[4,"CannyThresholdType"],[4,"DiffusionEq"],[4,"FluxFn"],[4,"TopkFn"],[4,"IterativeDeconvAlgo"],[4,"InverseDeconvAlgo"],[4,"ConvGradientType"],[4,"VarianceBias"],[4,"CublasMathMode"],[3,"Array"],[3,"Dim4"],[3,"Callback"],[3,"Event"],[3,"Indexer"],[3,"RandomEngine"],[3,"Seq"],[3,"Window"],[3,"Features"],[8,"Convertable"],[8,"ConstGenerator"],[8,"Indexable"],[8,"HasAfEnum"],[8,"ImplicitPromote"],[8,"FloatingPoint"],[8,"Fromf64"],[6,"c32"],[6,"c64"],[6,"af_array"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);