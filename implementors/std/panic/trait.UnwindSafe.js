(function() {var implementors = {};
implementors["af_opencl_interop"] = [{"text":"impl UnwindSafe for VendorPlatform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceType","synthetic":true,"types":[]}];
implementors["arrayfire"] = [{"text":"impl&lt;T&gt; UnwindSafe for Array&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dim4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Callback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;'object&gt; UnwindSafe for Indexer&lt;'object&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomEngine","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Seq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Features","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AfError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterpType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorderType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Connectivity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConvMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConvDomain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorSpace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatProp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for YCCStd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HomographyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MarkerType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MomentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomEngineType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CannyThresholdType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffusionEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluxFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopkFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IterativeDeconvAlgo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InverseDeconvAlgo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConvGradientType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarianceBias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CublasMathMode","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()